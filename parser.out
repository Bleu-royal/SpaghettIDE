Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> translation_unit
Rule 1     primary_expression -> IDENTIFIER
Rule 2     primary_expression -> CONSTANT
Rule 3     primary_expression -> STRING_LITERAL
Rule 4     primary_expression -> L_BRACKET expression R_BRACKET
Rule 5     postfix_expression -> primary_expression
Rule 6     postfix_expression -> postfix_expression L_BRACE expression R_BRACE
Rule 7     postfix_expression -> postfix_expression L_BRACKET R_BRACKET
Rule 8     postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET
Rule 9     postfix_expression -> postfix_expression POINT IDENTIFIER
Rule 10    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 11    postfix_expression -> postfix_expression INC_OP
Rule 12    postfix_expression -> postfix_expression DEC_OP
Rule 13    argument_expression_list -> assignment_expression
Rule 14    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 15    unary_expression -> postfix_expression
Rule 16    unary_expression -> INC_OP unary_expression
Rule 17    unary_expression -> DEC_OP unary_expression
Rule 18    unary_expression -> unary_operator cast_expression
Rule 19    unary_expression -> SIZEOF unary_expression
Rule 20    unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET
Rule 21    unary_operator -> AND
Rule 22    unary_operator -> TIMES
Rule 23    unary_operator -> PLUS
Rule 24    unary_operator -> MINUS
Rule 25    unary_operator -> TILD
Rule 26    unary_operator -> NOT
Rule 27    cast_expression -> unary_expression
Rule 28    cast_expression -> L_BRACKET type_name R_BRACKET cast_expression
Rule 29    multiplicative_expression -> cast_expression
Rule 30    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 31    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 32    multiplicative_expression -> multiplicative_expression MOD cast_expression
Rule 33    additive_expression -> multiplicative_expression
Rule 34    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 35    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 36    shift_expression -> additive_expression
Rule 37    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 38    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 39    relational_expression -> shift_expression
Rule 40    relational_expression -> relational_expression INF shift_expression
Rule 41    relational_expression -> relational_expression SUP shift_expression
Rule 42    relational_expression -> relational_expression LE_OP shift_expression
Rule 43    relational_expression -> relational_expression GE_OP shift_expression
Rule 44    equality_expression -> relational_expression
Rule 45    equality_expression -> equality_expression EQ_OP relational_expression
Rule 46    equality_expression -> equality_expression NE_OP relational_expression
Rule 47    and_expression -> equality_expression
Rule 48    and_expression -> and_expression AND equality_expression
Rule 49    exclusive_or_expression -> and_expression
Rule 50    exclusive_or_expression -> exclusive_or_expression EXOR and_expression
Rule 51    inclusive_or_expression -> exclusive_or_expression
Rule 52    inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 53    logical_and_expression -> inclusive_or_expression
Rule 54    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 55    logical_or_expression -> logical_and_expression
Rule 56    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 57    conditional_expression -> logical_or_expression
Rule 58    conditional_expression -> logical_or_expression INTER expression COLON conditional_expression
Rule 59    assignment_expression -> conditional_expression
Rule 60    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 61    assignment_operator -> EQUALS
Rule 62    assignment_operator -> MUL_ASSIGN
Rule 63    assignment_operator -> DIV_ASSIGN
Rule 64    assignment_operator -> MOD_ASSIGN
Rule 65    assignment_operator -> ADD_ASSIGN
Rule 66    assignment_operator -> SUB_ASSIGN
Rule 67    assignment_operator -> LEFT_ASSIGN
Rule 68    assignment_operator -> RIGHT_ASSIGN
Rule 69    assignment_operator -> AND_ASSIGN
Rule 70    assignment_operator -> XOR_ASSIGN
Rule 71    assignment_operator -> OR_ASSIGN
Rule 72    expression -> assignment_expression
Rule 73    expression -> expression COMMA assignment_expression
Rule 74    constant_expression -> conditional_expression
Rule 75    declaration -> declaration_specifiers SEMICOLON
Rule 76    declaration -> declaration_specifiers init_declarator_list SEMICOLON
Rule 77    declaration_specifiers -> storage_class_specifier
Rule 78    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 79    declaration_specifiers -> type_specifier
Rule 80    declaration_specifiers -> type_specifier declaration_specifiers
Rule 81    declaration_specifiers -> type_qualifier
Rule 82    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 83    init_declarator_list -> init_declarator
Rule 84    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 85    init_declarator -> declarator
Rule 86    init_declarator -> declarator EQUALS initializer
Rule 87    storage_class_specifier -> TYPEDEF
Rule 88    storage_class_specifier -> EXTERN
Rule 89    storage_class_specifier -> STATIC
Rule 90    storage_class_specifier -> AUTO
Rule 91    storage_class_specifier -> REGISTER
Rule 92    type_specifier -> VOID
Rule 93    type_specifier -> CHAR
Rule 94    type_specifier -> SHORT
Rule 95    type_specifier -> INT
Rule 96    type_specifier -> LONG
Rule 97    type_specifier -> BOOL
Rule 98    type_specifier -> FLOAT
Rule 99    type_specifier -> DOUBLE
Rule 100   type_specifier -> SIGNED
Rule 101   type_specifier -> UNSIGNED
Rule 102   type_specifier -> struct_or_union_specifier
Rule 103   type_specifier -> enum_specifier
Rule 104   struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
Rule 105   struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE
Rule 106   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 107   struct_or_union -> STRUCT
Rule 108   struct_or_union -> UNION
Rule 109   struct_declaration_list -> struct_declaration
Rule 110   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 111   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON
Rule 112   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 113   specifier_qualifier_list -> type_specifier
Rule 114   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 115   specifier_qualifier_list -> type_qualifier
Rule 116   struct_declarator_list -> struct_declarator
Rule 117   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 118   struct_declarator -> declarator
Rule 119   struct_declarator -> COLON constant_expression
Rule 120   struct_declarator -> declarator COLON constant_expression
Rule 121   enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE
Rule 122   enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
Rule 123   enum_specifier -> ENUM IDENTIFIER
Rule 124   enumerator_list -> enumerator
Rule 125   enumerator_list -> enumerator_list COMMA enumerator
Rule 126   enumerator -> IDENTIFIER
Rule 127   enumerator -> IDENTIFIER EQUALS constant_expression
Rule 128   type_qualifier -> CONST
Rule 129   type_qualifier -> VOLATILE
Rule 130   declarator -> pointer direct_declarator
Rule 131   declarator -> direct_declarator
Rule 132   direct_declarator -> IDENTIFIER
Rule 133   direct_declarator -> L_BRACKET declarator R_BRACKET
Rule 134   direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK
Rule 135   direct_declarator -> direct_declarator L_HOOK R_HOOK
Rule 136   direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET
Rule 137   direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET
Rule 138   direct_declarator -> direct_declarator L_BRACKET R_BRACKET
Rule 139   pointer -> TIMES
Rule 140   pointer -> TIMES type_qualifier_list
Rule 141   pointer -> TIMES pointer
Rule 142   pointer -> TIMES type_qualifier_list pointer
Rule 143   type_qualifier_list -> type_qualifier
Rule 144   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 145   parameter_type_list -> parameter_list
Rule 146   parameter_type_list -> parameter_list COMMA ELLIPSIS
Rule 147   parameter_list -> parameter_declaration
Rule 148   parameter_list -> parameter_list COMMA parameter_declaration
Rule 149   parameter_declaration -> declaration_specifiers declarator
Rule 150   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 151   parameter_declaration -> declaration_specifiers
Rule 152   identifier_list -> IDENTIFIER
Rule 153   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 154   type_name -> specifier_qualifier_list
Rule 155   type_name -> specifier_qualifier_list abstract_declarator
Rule 156   abstract_declarator -> pointer
Rule 157   abstract_declarator -> direct_abstract_declarator
Rule 158   abstract_declarator -> pointer direct_abstract_declarator
Rule 159   direct_abstract_declarator -> L_BRACKET abstract_declarator R_BRACKET
Rule 160   direct_abstract_declarator -> L_HOOK R_HOOK
Rule 161   direct_abstract_declarator -> L_HOOK constant_expression R_HOOK
Rule 162   direct_abstract_declarator -> direct_abstract_declarator L_HOOK R_HOOK
Rule 163   direct_abstract_declarator -> direct_abstract_declarator L_HOOK constant_expression R_HOOK
Rule 164   direct_abstract_declarator -> L_BRACKET R_BRACKET
Rule 165   direct_abstract_declarator -> L_BRACKET parameter_type_list R_BRACKET
Rule 166   direct_abstract_declarator -> direct_abstract_declarator L_BRACKET R_BRACKET
Rule 167   direct_abstract_declarator -> direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET
Rule 168   initializer -> assignment_expression
Rule 169   initializer -> L_BRACE initializer_list R_BRACE
Rule 170   initializer -> L_BRACE initializer_list COMMA R_BRACE
Rule 171   initializer_list -> initializer
Rule 172   initializer_list -> initializer_list COMMA initializer
Rule 173   statement -> labeled_statement
Rule 174   statement -> compound_statement
Rule 175   statement -> expression_statement
Rule 176   statement -> selection_statement
Rule 177   statement -> iteration_statement
Rule 178   statement -> jump_statement
Rule 179   labeled_statement -> IDENTIFIER COLON statement
Rule 180   labeled_statement -> CASE constant_expression COLON statement
Rule 181   labeled_statement -> DEFAULT COLON statement
Rule 182   compound_statement -> L_BRACE R_BRACE
Rule 183   compound_statement -> L_BRACE statement_list R_BRACE
Rule 184   compound_statement -> L_BRACE declaration_list R_BRACE
Rule 185   compound_statement -> L_BRACE declaration_list statement_list R_BRACE
Rule 186   declaration_list -> declaration
Rule 187   declaration_list -> declaration_list declaration
Rule 188   statement_list -> statement
Rule 189   statement_list -> statement_list statement
Rule 190   expression_statement -> SEMICOLON
Rule 191   expression_statement -> expression SEMICOLON
Rule 192   selection_statement -> IF L_BRACKET expression R_BRACKET statement
Rule 193   selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement
Rule 194   selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement
Rule 195   iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement
Rule 196   iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
Rule 197   iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
Rule 198   iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
Rule 199   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 200   jump_statement -> CONTINUE SEMICOLON
Rule 201   jump_statement -> BREAK SEMICOLON
Rule 202   jump_statement -> RETURN SEMICOLON
Rule 203   jump_statement -> RETURN expression SEMICOLON
Rule 204   translation_unit -> external_declaration
Rule 205   translation_unit -> translation_unit external_declaration
Rule 206   external_declaration -> function_definition
Rule 207   external_declaration -> declaration
Rule 208   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 209   function_definition -> declaration_specifiers declarator compound_statement
Rule 210   function_definition -> declarator declaration_list compound_statement
Rule 211   function_definition -> declarator compound_statement

Terminals, with rules where they appear

ADD_ASSIGN           : 65
AND                  : 21 48
AND_ASSIGN           : 69
AND_OP               : 54
AUTO                 : 90
BOOL                 : 97
BREAK                : 201
CASE                 : 180
CHAR                 : 93
COLON                : 58 119 120 179 180 181
COMMA                : 14 73 84 117 125 146 148 153 170 172
COMMENT              : 
CONST                : 128
CONSTANT             : 2
CONTINUE             : 200
DEC_OP               : 12 17
DEFAULT              : 181
DIVIDE               : 31
DIV_ASSIGN           : 63
DO                   : 196
DOUBLE               : 99
ELLIPSIS             : 146
ELSE                 : 193
ENUM                 : 121 122 123
EQUALS               : 61 86 127
EQ_OP                : 45
EXOR                 : 50
EXTERN               : 88
FLOAT                : 98
FOR                  : 197 198
GE_OP                : 43
GOTO                 : 199
IDENTIFIER           : 1 9 10 104 106 122 123 126 127 132 152 153 179 199
IF                   : 192 193
INC_OP               : 11 16
INF                  : 40
INT                  : 95
INTER                : 58
LEFT_ASSIGN          : 67
LEFT_OP              : 37
LE_OP                : 42
LONG                 : 96
L_BRACE              : 6 104 105 121 122 169 170 182 183 184 185
L_BRACKET            : 4 7 8 20 28 133 136 137 138 159 164 165 166 167 192 193 194 195 196 197 198
L_HOOK               : 134 135 160 161 162 163
MINUS                : 24 35
MOD                  : 32
MOD_ASSIGN           : 64
MUL_ASSIGN           : 62
NE_OP                : 46
NOT                  : 26
OR                   : 52
OR_ASSIGN            : 71
OR_OP                : 56
PLUS                 : 23 34
POINT                : 9
PTR_OP               : 10
REGISTER             : 91
RETURN               : 202 203
RIGHT_ASSIGN         : 68
RIGHT_OP             : 38
R_BRACE              : 6 104 105 121 122 169 170 182 183 184 185
R_BRACKET            : 4 7 8 20 28 133 136 137 138 159 164 165 166 167 192 193 194 195 196 197 198
R_HOOK               : 134 135 160 161 162 163
SEMICOLON            : 75 76 111 190 191 196 199 200 201 202 203
SHORT                : 94
SIGNED               : 100
SIZEOF               : 19 20
STATIC               : 89
STRING_LITERAL       : 3
STRUCT               : 107
SUB_ASSIGN           : 66
SUP                  : 41
SWITCH               : 194
TILD                 : 25
TIMES                : 22 30 139 140 141 142
TYPEDEF              : 87
UNION                : 108
UNSIGNED             : 101
VOID                 : 92
VOLATILE             : 129
WHILE                : 195 196
XOR_ASSIGN           : 70
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 150 155 159
additive_expression  : 34 35 36 37 38
and_expression       : 48 49 50
argument_expression_list : 8 14
assignment_expression : 13 14 60 72 73 168
assignment_operator  : 60
cast_expression      : 18 28 29 30 31 32
compound_statement   : 174 208 209 210 211
conditional_expression : 58 59 74
constant_expression  : 119 120 127 134 161 163 180
declaration          : 186 187 207
declaration_list     : 184 185 187 208 210
declaration_specifiers : 75 76 78 80 82 149 150 151 208 209
declarator           : 85 86 118 120 133 149 208 209 210 211
direct_abstract_declarator : 157 158 162 163 166 167
direct_declarator    : 130 131 134 135 136 137 138
enum_specifier       : 103
enumerator           : 124 125
enumerator_list      : 121 122 125
equality_expression  : 45 46 47 48
exclusive_or_expression : 50 51 52
expression           : 4 6 58 73 191 192 193 194 195 196 198 203
expression_statement : 175 197 197 198 198
external_declaration : 204 205
function_definition  : 206
identifier_list      : 137 153
inclusive_or_expression : 52 53 54
init_declarator      : 83 84
init_declarator_list : 76 84
initializer          : 86 171 172
initializer_list     : 169 170 172
iteration_statement  : 177
jump_statement       : 178
labeled_statement    : 173
logical_and_expression : 54 55 56
logical_or_expression : 56 57 58
multiplicative_expression : 30 31 32 33 34 35
parameter_declaration : 147 148
parameter_list       : 145 146 148
parameter_type_list  : 136 165 167
pointer              : 130 141 142 156 158
postfix_expression   : 6 7 8 9 10 11 12 15
primary_expression   : 5
relational_expression : 40 41 42 43 44 45 46
selection_statement  : 176
shift_expression     : 37 38 39 40 41 42 43
specifier_qualifier_list : 111 112 114 154 155
statement            : 179 180 181 188 189 192 193 193 194 195 196 197 198
statement_list       : 183 185 189
storage_class_specifier : 77 78
struct_declaration   : 109 110
struct_declaration_list : 104 105 110
struct_declarator    : 116 117
struct_declarator_list : 111 117
struct_or_union      : 104 105 106
struct_or_union_specifier : 102
translation_unit     : 205 0
type_name            : 20 28
type_qualifier       : 81 82 114 115 143 144
type_qualifier_list  : 140 142 144
type_specifier       : 79 80 112 113
unary_expression     : 16 17 19 27 60
unary_operator       : 18

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (204) translation_unit -> . external_declaration
    (205) translation_unit -> . translation_unit external_declaration
    (206) external_declaration -> . function_definition
    (207) external_declaration -> . declaration
    (208) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (209) function_definition -> . declaration_specifiers declarator compound_statement
    (210) function_definition -> . declarator declaration_list compound_statement
    (211) function_definition -> . declarator compound_statement
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 14
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    function_definition            shift and go to state 1
    declaration_specifiers         shift and go to state 4
    type_qualifier                 shift and go to state 20
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    declaration                    shift and go to state 2
    pointer                        shift and go to state 23
    type_specifier                 shift and go to state 24
    enum_specifier                 shift and go to state 27
    external_declaration           shift and go to state 28
    direct_declarator              shift and go to state 29
    declarator                     shift and go to state 11
    translation_unit               shift and go to state 37
    struct_or_union_specifier      shift and go to state 17

state 1

    (206) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 206 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 206 (external_declaration -> function_definition .)
    STATIC          reduce using rule 206 (external_declaration -> function_definition .)
    AUTO            reduce using rule 206 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 206 (external_declaration -> function_definition .)
    VOID            reduce using rule 206 (external_declaration -> function_definition .)
    CHAR            reduce using rule 206 (external_declaration -> function_definition .)
    SHORT           reduce using rule 206 (external_declaration -> function_definition .)
    INT             reduce using rule 206 (external_declaration -> function_definition .)
    LONG            reduce using rule 206 (external_declaration -> function_definition .)
    BOOL            reduce using rule 206 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 206 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 206 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 206 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 206 (external_declaration -> function_definition .)
    CONST           reduce using rule 206 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 206 (external_declaration -> function_definition .)
    TIMES           reduce using rule 206 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 206 (external_declaration -> function_definition .)
    L_BRACKET       reduce using rule 206 (external_declaration -> function_definition .)
    ENUM            reduce using rule 206 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 206 (external_declaration -> function_definition .)
    UNION           reduce using rule 206 (external_declaration -> function_definition .)
    $end            reduce using rule 206 (external_declaration -> function_definition .)


state 2

    (207) external_declaration -> declaration .

    TYPEDEF         reduce using rule 207 (external_declaration -> declaration .)
    EXTERN          reduce using rule 207 (external_declaration -> declaration .)
    STATIC          reduce using rule 207 (external_declaration -> declaration .)
    AUTO            reduce using rule 207 (external_declaration -> declaration .)
    REGISTER        reduce using rule 207 (external_declaration -> declaration .)
    VOID            reduce using rule 207 (external_declaration -> declaration .)
    CHAR            reduce using rule 207 (external_declaration -> declaration .)
    SHORT           reduce using rule 207 (external_declaration -> declaration .)
    INT             reduce using rule 207 (external_declaration -> declaration .)
    LONG            reduce using rule 207 (external_declaration -> declaration .)
    BOOL            reduce using rule 207 (external_declaration -> declaration .)
    FLOAT           reduce using rule 207 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 207 (external_declaration -> declaration .)
    SIGNED          reduce using rule 207 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 207 (external_declaration -> declaration .)
    CONST           reduce using rule 207 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 207 (external_declaration -> declaration .)
    TIMES           reduce using rule 207 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 207 (external_declaration -> declaration .)
    L_BRACKET       reduce using rule 207 (external_declaration -> declaration .)
    ENUM            reduce using rule 207 (external_declaration -> declaration .)
    STRUCT          reduce using rule 207 (external_declaration -> declaration .)
    UNION           reduce using rule 207 (external_declaration -> declaration .)
    $end            reduce using rule 207 (external_declaration -> declaration .)


state 3

    (108) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 108 (struct_or_union -> UNION .)
    L_BRACE         reduce using rule 108 (struct_or_union -> UNION .)


state 4

    (208) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (209) function_definition -> declaration_specifiers . declarator compound_statement
    (75) declaration -> declaration_specifiers . SEMICOLON
    (76) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (83) init_declarator_list -> . init_declarator
    (84) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer

    SEMICOLON       shift and go to state 38
    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 14

    init_declarator                shift and go to state 40
    direct_declarator              shift and go to state 29
    declarator                     shift and go to state 41
    pointer                        shift and go to state 23
    init_declarator_list           shift and go to state 39

state 5

    (97) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 97 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 97 (type_specifier -> BOOL .)
    STATIC          reduce using rule 97 (type_specifier -> BOOL .)
    AUTO            reduce using rule 97 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 97 (type_specifier -> BOOL .)
    VOID            reduce using rule 97 (type_specifier -> BOOL .)
    CHAR            reduce using rule 97 (type_specifier -> BOOL .)
    SHORT           reduce using rule 97 (type_specifier -> BOOL .)
    INT             reduce using rule 97 (type_specifier -> BOOL .)
    LONG            reduce using rule 97 (type_specifier -> BOOL .)
    BOOL            reduce using rule 97 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 97 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 97 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 97 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 97 (type_specifier -> BOOL .)
    CONST           reduce using rule 97 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 97 (type_specifier -> BOOL .)
    ENUM            reduce using rule 97 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 97 (type_specifier -> BOOL .)
    UNION           reduce using rule 97 (type_specifier -> BOOL .)
    TIMES           reduce using rule 97 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 97 (type_specifier -> BOOL .)
    L_BRACKET       reduce using rule 97 (type_specifier -> BOOL .)
    L_HOOK          reduce using rule 97 (type_specifier -> BOOL .)
    COMMA           reduce using rule 97 (type_specifier -> BOOL .)
    R_BRACKET       reduce using rule 97 (type_specifier -> BOOL .)
    SEMICOLON       reduce using rule 97 (type_specifier -> BOOL .)
    COLON           reduce using rule 97 (type_specifier -> BOOL .)


state 6

    (91) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 91 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 91 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 91 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 91 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 91 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 91 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    SEMICOLON       reduce using rule 91 (storage_class_specifier -> REGISTER .)
    TIMES           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 91 (storage_class_specifier -> REGISTER .)
    L_BRACKET       reduce using rule 91 (storage_class_specifier -> REGISTER .)
    L_HOOK          reduce using rule 91 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 91 (storage_class_specifier -> REGISTER .)
    R_BRACKET       reduce using rule 91 (storage_class_specifier -> REGISTER .)


state 7

    (90) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 90 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 90 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 90 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 90 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 90 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 90 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 90 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 90 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 90 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 90 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 90 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 90 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 90 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 90 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 90 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 90 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 90 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 90 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 90 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 90 (storage_class_specifier -> AUTO .)
    SEMICOLON       reduce using rule 90 (storage_class_specifier -> AUTO .)
    TIMES           reduce using rule 90 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 90 (storage_class_specifier -> AUTO .)
    L_BRACKET       reduce using rule 90 (storage_class_specifier -> AUTO .)
    L_HOOK          reduce using rule 90 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 90 (storage_class_specifier -> AUTO .)
    R_BRACKET       reduce using rule 90 (storage_class_specifier -> AUTO .)


state 8

    (95) type_specifier -> INT .

    TYPEDEF         reduce using rule 95 (type_specifier -> INT .)
    EXTERN          reduce using rule 95 (type_specifier -> INT .)
    STATIC          reduce using rule 95 (type_specifier -> INT .)
    AUTO            reduce using rule 95 (type_specifier -> INT .)
    REGISTER        reduce using rule 95 (type_specifier -> INT .)
    VOID            reduce using rule 95 (type_specifier -> INT .)
    CHAR            reduce using rule 95 (type_specifier -> INT .)
    SHORT           reduce using rule 95 (type_specifier -> INT .)
    INT             reduce using rule 95 (type_specifier -> INT .)
    LONG            reduce using rule 95 (type_specifier -> INT .)
    BOOL            reduce using rule 95 (type_specifier -> INT .)
    FLOAT           reduce using rule 95 (type_specifier -> INT .)
    DOUBLE          reduce using rule 95 (type_specifier -> INT .)
    SIGNED          reduce using rule 95 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 95 (type_specifier -> INT .)
    CONST           reduce using rule 95 (type_specifier -> INT .)
    VOLATILE        reduce using rule 95 (type_specifier -> INT .)
    ENUM            reduce using rule 95 (type_specifier -> INT .)
    STRUCT          reduce using rule 95 (type_specifier -> INT .)
    UNION           reduce using rule 95 (type_specifier -> INT .)
    TIMES           reduce using rule 95 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 95 (type_specifier -> INT .)
    L_BRACKET       reduce using rule 95 (type_specifier -> INT .)
    L_HOOK          reduce using rule 95 (type_specifier -> INT .)
    COMMA           reduce using rule 95 (type_specifier -> INT .)
    R_BRACKET       reduce using rule 95 (type_specifier -> INT .)
    SEMICOLON       reduce using rule 95 (type_specifier -> INT .)
    COLON           reduce using rule 95 (type_specifier -> INT .)


state 9

    (88) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 88 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 88 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 88 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 88 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 88 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 88 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    SEMICOLON       reduce using rule 88 (storage_class_specifier -> EXTERN .)
    TIMES           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 88 (storage_class_specifier -> EXTERN .)
    L_BRACKET       reduce using rule 88 (storage_class_specifier -> EXTERN .)
    L_HOOK          reduce using rule 88 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 88 (storage_class_specifier -> EXTERN .)
    R_BRACKET       reduce using rule 88 (storage_class_specifier -> EXTERN .)


state 10

    (139) pointer -> TIMES .
    (140) pointer -> TIMES . type_qualifier_list
    (141) pointer -> TIMES . pointer
    (142) pointer -> TIMES . type_qualifier_list pointer
    (143) type_qualifier_list -> . type_qualifier
    (144) type_qualifier_list -> . type_qualifier_list type_qualifier
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 139 (pointer -> TIMES .)
    L_BRACKET       reduce using rule 139 (pointer -> TIMES .)
    L_HOOK          reduce using rule 139 (pointer -> TIMES .)
    COMMA           reduce using rule 139 (pointer -> TIMES .)
    R_BRACKET       reduce using rule 139 (pointer -> TIMES .)
    TIMES           shift and go to state 10
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25

    type_qualifier                 shift and go to state 42
    type_qualifier_list            shift and go to state 44
    pointer                        shift and go to state 43

state 11

    (210) function_definition -> declarator . declaration_list compound_statement
    (211) function_definition -> declarator . compound_statement
    (186) declaration_list -> . declaration
    (187) declaration_list -> . declaration_list declaration
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    L_BRACE         shift and go to state 49
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    enum_specifier                 shift and go to state 27
    compound_statement             shift and go to state 48
    struct_or_union_specifier      shift and go to state 17
    declaration_specifiers         shift and go to state 45
    type_qualifier                 shift and go to state 20
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    declaration                    shift and go to state 46
    declaration_list               shift and go to state 47
    type_specifier                 shift and go to state 24

state 12

    (96) type_specifier -> LONG .

    TYPEDEF         reduce using rule 96 (type_specifier -> LONG .)
    EXTERN          reduce using rule 96 (type_specifier -> LONG .)
    STATIC          reduce using rule 96 (type_specifier -> LONG .)
    AUTO            reduce using rule 96 (type_specifier -> LONG .)
    REGISTER        reduce using rule 96 (type_specifier -> LONG .)
    VOID            reduce using rule 96 (type_specifier -> LONG .)
    CHAR            reduce using rule 96 (type_specifier -> LONG .)
    SHORT           reduce using rule 96 (type_specifier -> LONG .)
    INT             reduce using rule 96 (type_specifier -> LONG .)
    LONG            reduce using rule 96 (type_specifier -> LONG .)
    BOOL            reduce using rule 96 (type_specifier -> LONG .)
    FLOAT           reduce using rule 96 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 96 (type_specifier -> LONG .)
    SIGNED          reduce using rule 96 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 96 (type_specifier -> LONG .)
    CONST           reduce using rule 96 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 96 (type_specifier -> LONG .)
    ENUM            reduce using rule 96 (type_specifier -> LONG .)
    STRUCT          reduce using rule 96 (type_specifier -> LONG .)
    UNION           reduce using rule 96 (type_specifier -> LONG .)
    TIMES           reduce using rule 96 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 96 (type_specifier -> LONG .)
    L_BRACKET       reduce using rule 96 (type_specifier -> LONG .)
    L_HOOK          reduce using rule 96 (type_specifier -> LONG .)
    COMMA           reduce using rule 96 (type_specifier -> LONG .)
    R_BRACKET       reduce using rule 96 (type_specifier -> LONG .)
    SEMICOLON       reduce using rule 96 (type_specifier -> LONG .)
    COLON           reduce using rule 96 (type_specifier -> LONG .)


state 13

    (100) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 100 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 100 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 100 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 100 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 100 (type_specifier -> SIGNED .)
    VOID            reduce using rule 100 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 100 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 100 (type_specifier -> SIGNED .)
    INT             reduce using rule 100 (type_specifier -> SIGNED .)
    LONG            reduce using rule 100 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 100 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 100 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 100 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 100 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 100 (type_specifier -> SIGNED .)
    CONST           reduce using rule 100 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 100 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 100 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 100 (type_specifier -> SIGNED .)
    UNION           reduce using rule 100 (type_specifier -> SIGNED .)
    TIMES           reduce using rule 100 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 100 (type_specifier -> SIGNED .)
    L_BRACKET       reduce using rule 100 (type_specifier -> SIGNED .)
    L_HOOK          reduce using rule 100 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 100 (type_specifier -> SIGNED .)
    R_BRACKET       reduce using rule 100 (type_specifier -> SIGNED .)
    SEMICOLON       reduce using rule 100 (type_specifier -> SIGNED .)
    COLON           reduce using rule 100 (type_specifier -> SIGNED .)


state 14

    (133) direct_declarator -> L_BRACKET . declarator R_BRACKET
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET

    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 14

    direct_declarator              shift and go to state 29
    pointer                        shift and go to state 23
    declarator                     shift and go to state 50

state 15

    (93) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 93 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 93 (type_specifier -> CHAR .)
    STATIC          reduce using rule 93 (type_specifier -> CHAR .)
    AUTO            reduce using rule 93 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 93 (type_specifier -> CHAR .)
    VOID            reduce using rule 93 (type_specifier -> CHAR .)
    CHAR            reduce using rule 93 (type_specifier -> CHAR .)
    SHORT           reduce using rule 93 (type_specifier -> CHAR .)
    INT             reduce using rule 93 (type_specifier -> CHAR .)
    LONG            reduce using rule 93 (type_specifier -> CHAR .)
    BOOL            reduce using rule 93 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 93 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 93 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 93 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 93 (type_specifier -> CHAR .)
    CONST           reduce using rule 93 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 93 (type_specifier -> CHAR .)
    ENUM            reduce using rule 93 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 93 (type_specifier -> CHAR .)
    UNION           reduce using rule 93 (type_specifier -> CHAR .)
    TIMES           reduce using rule 93 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 93 (type_specifier -> CHAR .)
    L_BRACKET       reduce using rule 93 (type_specifier -> CHAR .)
    L_HOOK          reduce using rule 93 (type_specifier -> CHAR .)
    COMMA           reduce using rule 93 (type_specifier -> CHAR .)
    R_BRACKET       reduce using rule 93 (type_specifier -> CHAR .)
    SEMICOLON       reduce using rule 93 (type_specifier -> CHAR .)
    COLON           reduce using rule 93 (type_specifier -> CHAR .)


state 16

    (89) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 89 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 89 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 89 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 89 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 89 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 89 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 89 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 89 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 89 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 89 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 89 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 89 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 89 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 89 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 89 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 89 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 89 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 89 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 89 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 89 (storage_class_specifier -> STATIC .)
    SEMICOLON       reduce using rule 89 (storage_class_specifier -> STATIC .)
    TIMES           reduce using rule 89 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 89 (storage_class_specifier -> STATIC .)
    L_BRACKET       reduce using rule 89 (storage_class_specifier -> STATIC .)
    L_HOOK          reduce using rule 89 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 89 (storage_class_specifier -> STATIC .)
    R_BRACKET       reduce using rule 89 (storage_class_specifier -> STATIC .)


state 17

    (102) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    TIMES           reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    L_BRACKET       reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    L_HOOK          reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    R_BRACKET       reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    SEMICOLON       reduce using rule 102 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 102 (type_specifier -> struct_or_union_specifier .)


state 18

    (128) type_qualifier -> CONST .

    VOID            reduce using rule 128 (type_qualifier -> CONST .)
    CHAR            reduce using rule 128 (type_qualifier -> CONST .)
    SHORT           reduce using rule 128 (type_qualifier -> CONST .)
    INT             reduce using rule 128 (type_qualifier -> CONST .)
    LONG            reduce using rule 128 (type_qualifier -> CONST .)
    BOOL            reduce using rule 128 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 128 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 128 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 128 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 128 (type_qualifier -> CONST .)
    CONST           reduce using rule 128 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 128 (type_qualifier -> CONST .)
    ENUM            reduce using rule 128 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 128 (type_qualifier -> CONST .)
    UNION           reduce using rule 128 (type_qualifier -> CONST .)
    COLON           reduce using rule 128 (type_qualifier -> CONST .)
    TIMES           reduce using rule 128 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 128 (type_qualifier -> CONST .)
    L_BRACKET       reduce using rule 128 (type_qualifier -> CONST .)
    L_HOOK          reduce using rule 128 (type_qualifier -> CONST .)
    R_BRACKET       reduce using rule 128 (type_qualifier -> CONST .)
    COMMA           reduce using rule 128 (type_qualifier -> CONST .)
    TYPEDEF         reduce using rule 128 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 128 (type_qualifier -> CONST .)
    STATIC          reduce using rule 128 (type_qualifier -> CONST .)
    AUTO            reduce using rule 128 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 128 (type_qualifier -> CONST .)
    SEMICOLON       reduce using rule 128 (type_qualifier -> CONST .)


state 19

    (98) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 98 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 98 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 98 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 98 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 98 (type_specifier -> FLOAT .)
    VOID            reduce using rule 98 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 98 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 98 (type_specifier -> FLOAT .)
    INT             reduce using rule 98 (type_specifier -> FLOAT .)
    LONG            reduce using rule 98 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 98 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 98 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 98 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 98 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 98 (type_specifier -> FLOAT .)
    CONST           reduce using rule 98 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 98 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 98 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 98 (type_specifier -> FLOAT .)
    UNION           reduce using rule 98 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 98 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 98 (type_specifier -> FLOAT .)
    L_BRACKET       reduce using rule 98 (type_specifier -> FLOAT .)
    L_HOOK          reduce using rule 98 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 98 (type_specifier -> FLOAT .)
    R_BRACKET       reduce using rule 98 (type_specifier -> FLOAT .)
    SEMICOLON       reduce using rule 98 (type_specifier -> FLOAT .)
    COLON           reduce using rule 98 (type_specifier -> FLOAT .)


state 20

    (81) declaration_specifiers -> type_qualifier .
    (82) declaration_specifiers -> type_qualifier . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    TIMES           reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    L_BRACKET       reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    L_HOOK          reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    R_BRACKET       reduce using rule 81 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    type_qualifier                 shift and go to state 20
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    struct_or_union_specifier      shift and go to state 17
    type_specifier                 shift and go to state 24
    declaration_specifiers         shift and go to state 51

state 21

    (92) type_specifier -> VOID .

    TYPEDEF         reduce using rule 92 (type_specifier -> VOID .)
    EXTERN          reduce using rule 92 (type_specifier -> VOID .)
    STATIC          reduce using rule 92 (type_specifier -> VOID .)
    AUTO            reduce using rule 92 (type_specifier -> VOID .)
    REGISTER        reduce using rule 92 (type_specifier -> VOID .)
    VOID            reduce using rule 92 (type_specifier -> VOID .)
    CHAR            reduce using rule 92 (type_specifier -> VOID .)
    SHORT           reduce using rule 92 (type_specifier -> VOID .)
    INT             reduce using rule 92 (type_specifier -> VOID .)
    LONG            reduce using rule 92 (type_specifier -> VOID .)
    BOOL            reduce using rule 92 (type_specifier -> VOID .)
    FLOAT           reduce using rule 92 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 92 (type_specifier -> VOID .)
    SIGNED          reduce using rule 92 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 92 (type_specifier -> VOID .)
    CONST           reduce using rule 92 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 92 (type_specifier -> VOID .)
    ENUM            reduce using rule 92 (type_specifier -> VOID .)
    STRUCT          reduce using rule 92 (type_specifier -> VOID .)
    UNION           reduce using rule 92 (type_specifier -> VOID .)
    TIMES           reduce using rule 92 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 92 (type_specifier -> VOID .)
    L_BRACKET       reduce using rule 92 (type_specifier -> VOID .)
    L_HOOK          reduce using rule 92 (type_specifier -> VOID .)
    COMMA           reduce using rule 92 (type_specifier -> VOID .)
    R_BRACKET       reduce using rule 92 (type_specifier -> VOID .)
    SEMICOLON       reduce using rule 92 (type_specifier -> VOID .)
    COLON           reduce using rule 92 (type_specifier -> VOID .)


state 22

    (77) declaration_specifiers -> storage_class_specifier .
    (78) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    TIMES           reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    L_BRACKET       reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    L_HOOK          reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    R_BRACKET       reduce using rule 77 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    type_qualifier                 shift and go to state 20
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    struct_or_union_specifier      shift and go to state 17
    type_specifier                 shift and go to state 24
    declaration_specifiers         shift and go to state 52

state 23

    (130) declarator -> pointer . direct_declarator
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET

    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 14

    direct_declarator              shift and go to state 53

state 24

    (79) declaration_specifiers -> type_specifier .
    (80) declaration_specifiers -> type_specifier . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 79 (declaration_specifiers -> type_specifier .)
    TIMES           reduce using rule 79 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 79 (declaration_specifiers -> type_specifier .)
    L_BRACKET       reduce using rule 79 (declaration_specifiers -> type_specifier .)
    L_HOOK          reduce using rule 79 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 79 (declaration_specifiers -> type_specifier .)
    R_BRACKET       reduce using rule 79 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    type_qualifier                 shift and go to state 20
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    struct_or_union_specifier      shift and go to state 17
    type_specifier                 shift and go to state 24
    declaration_specifiers         shift and go to state 54

state 25

    (129) type_qualifier -> VOLATILE .

    VOID            reduce using rule 129 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 129 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 129 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 129 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 129 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 129 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 129 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 129 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 129 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 129 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 129 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 129 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 129 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 129 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 129 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 129 (type_qualifier -> VOLATILE .)
    TIMES           reduce using rule 129 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 129 (type_qualifier -> VOLATILE .)
    L_BRACKET       reduce using rule 129 (type_qualifier -> VOLATILE .)
    L_HOOK          reduce using rule 129 (type_qualifier -> VOLATILE .)
    R_BRACKET       reduce using rule 129 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 129 (type_qualifier -> VOLATILE .)
    TYPEDEF         reduce using rule 129 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 129 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 129 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 129 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 129 (type_qualifier -> VOLATILE .)
    SEMICOLON       reduce using rule 129 (type_qualifier -> VOLATILE .)


state 26

    (87) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    SEMICOLON       reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    TIMES           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    L_BRACKET       reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    L_HOOK          reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 87 (storage_class_specifier -> TYPEDEF .)
    R_BRACKET       reduce using rule 87 (storage_class_specifier -> TYPEDEF .)


state 27

    (103) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 103 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 103 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 103 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 103 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 103 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 103 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 103 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 103 (type_specifier -> enum_specifier .)
    INT             reduce using rule 103 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 103 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 103 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 103 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 103 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 103 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 103 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 103 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 103 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 103 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 103 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 103 (type_specifier -> enum_specifier .)
    TIMES           reduce using rule 103 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 103 (type_specifier -> enum_specifier .)
    L_BRACKET       reduce using rule 103 (type_specifier -> enum_specifier .)
    L_HOOK          reduce using rule 103 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 103 (type_specifier -> enum_specifier .)
    R_BRACKET       reduce using rule 103 (type_specifier -> enum_specifier .)
    SEMICOLON       reduce using rule 103 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 103 (type_specifier -> enum_specifier .)


state 28

    (204) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 204 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 204 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 204 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 204 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 204 (translation_unit -> external_declaration .)
    VOID            reduce using rule 204 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 204 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 204 (translation_unit -> external_declaration .)
    INT             reduce using rule 204 (translation_unit -> external_declaration .)
    LONG            reduce using rule 204 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 204 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 204 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 204 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 204 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 204 (translation_unit -> external_declaration .)
    CONST           reduce using rule 204 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 204 (translation_unit -> external_declaration .)
    TIMES           reduce using rule 204 (translation_unit -> external_declaration .)
    IDENTIFIER      reduce using rule 204 (translation_unit -> external_declaration .)
    L_BRACKET       reduce using rule 204 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 204 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 204 (translation_unit -> external_declaration .)
    UNION           reduce using rule 204 (translation_unit -> external_declaration .)
    $end            reduce using rule 204 (translation_unit -> external_declaration .)


state 29

    (131) declarator -> direct_declarator .
    (134) direct_declarator -> direct_declarator . L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> direct_declarator . L_HOOK R_HOOK
    (136) direct_declarator -> direct_declarator . L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> direct_declarator . L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> direct_declarator . L_BRACKET R_BRACKET

    EQUALS          reduce using rule 131 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 131 (declarator -> direct_declarator .)
    COMMA           reduce using rule 131 (declarator -> direct_declarator .)
    R_BRACKET       reduce using rule 131 (declarator -> direct_declarator .)
    COLON           reduce using rule 131 (declarator -> direct_declarator .)
    L_BRACE         reduce using rule 131 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 131 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 131 (declarator -> direct_declarator .)
    STATIC          reduce using rule 131 (declarator -> direct_declarator .)
    AUTO            reduce using rule 131 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 131 (declarator -> direct_declarator .)
    VOID            reduce using rule 131 (declarator -> direct_declarator .)
    CHAR            reduce using rule 131 (declarator -> direct_declarator .)
    SHORT           reduce using rule 131 (declarator -> direct_declarator .)
    INT             reduce using rule 131 (declarator -> direct_declarator .)
    LONG            reduce using rule 131 (declarator -> direct_declarator .)
    BOOL            reduce using rule 131 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 131 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 131 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 131 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 131 (declarator -> direct_declarator .)
    CONST           reduce using rule 131 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 131 (declarator -> direct_declarator .)
    ENUM            reduce using rule 131 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 131 (declarator -> direct_declarator .)
    UNION           reduce using rule 131 (declarator -> direct_declarator .)
    L_HOOK          shift and go to state 55
    L_BRACKET       shift and go to state 56


state 30

    (107) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 107 (struct_or_union -> STRUCT .)
    L_BRACE         reduce using rule 107 (struct_or_union -> STRUCT .)


state 31

    (94) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 94 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 94 (type_specifier -> SHORT .)
    STATIC          reduce using rule 94 (type_specifier -> SHORT .)
    AUTO            reduce using rule 94 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 94 (type_specifier -> SHORT .)
    VOID            reduce using rule 94 (type_specifier -> SHORT .)
    CHAR            reduce using rule 94 (type_specifier -> SHORT .)
    SHORT           reduce using rule 94 (type_specifier -> SHORT .)
    INT             reduce using rule 94 (type_specifier -> SHORT .)
    LONG            reduce using rule 94 (type_specifier -> SHORT .)
    BOOL            reduce using rule 94 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 94 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 94 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 94 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 94 (type_specifier -> SHORT .)
    CONST           reduce using rule 94 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 94 (type_specifier -> SHORT .)
    ENUM            reduce using rule 94 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 94 (type_specifier -> SHORT .)
    UNION           reduce using rule 94 (type_specifier -> SHORT .)
    TIMES           reduce using rule 94 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 94 (type_specifier -> SHORT .)
    L_BRACKET       reduce using rule 94 (type_specifier -> SHORT .)
    L_HOOK          reduce using rule 94 (type_specifier -> SHORT .)
    COMMA           reduce using rule 94 (type_specifier -> SHORT .)
    R_BRACKET       reduce using rule 94 (type_specifier -> SHORT .)
    SEMICOLON       reduce using rule 94 (type_specifier -> SHORT .)
    COLON           reduce using rule 94 (type_specifier -> SHORT .)


state 32

    (99) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 99 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 99 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 99 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 99 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 99 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 99 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 99 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 99 (type_specifier -> DOUBLE .)
    INT             reduce using rule 99 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 99 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 99 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 99 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 99 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 99 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 99 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 99 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 99 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 99 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 99 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 99 (type_specifier -> DOUBLE .)
    TIMES           reduce using rule 99 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 99 (type_specifier -> DOUBLE .)
    L_BRACKET       reduce using rule 99 (type_specifier -> DOUBLE .)
    L_HOOK          reduce using rule 99 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 99 (type_specifier -> DOUBLE .)
    R_BRACKET       reduce using rule 99 (type_specifier -> DOUBLE .)
    SEMICOLON       reduce using rule 99 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 99 (type_specifier -> DOUBLE .)


state 33

    (101) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 101 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 101 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 101 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 101 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 101 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 101 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 101 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 101 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 101 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 101 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 101 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 101 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 101 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 101 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 101 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 101 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 101 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 101 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 101 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 101 (type_specifier -> UNSIGNED .)
    TIMES           reduce using rule 101 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 101 (type_specifier -> UNSIGNED .)
    L_BRACKET       reduce using rule 101 (type_specifier -> UNSIGNED .)
    L_HOOK          reduce using rule 101 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 101 (type_specifier -> UNSIGNED .)
    R_BRACKET       reduce using rule 101 (type_specifier -> UNSIGNED .)
    SEMICOLON       reduce using rule 101 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 101 (type_specifier -> UNSIGNED .)


state 34

    (104) struct_or_union_specifier -> struct_or_union . IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> struct_or_union . L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 58
    L_BRACE         shift and go to state 57


state 35

    (132) direct_declarator -> IDENTIFIER .

    L_HOOK          reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    L_BRACKET       reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    R_BRACKET       reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    EQUALS          reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    L_BRACE         reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 132 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 132 (direct_declarator -> IDENTIFIER .)


state 36

    (121) enum_specifier -> ENUM . L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> ENUM . IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> ENUM . IDENTIFIER

    L_BRACE         shift and go to state 60
    IDENTIFIER      shift and go to state 59


state 37

    (0) S' -> translation_unit .
    (205) translation_unit -> translation_unit . external_declaration
    (206) external_declaration -> . function_definition
    (207) external_declaration -> . declaration
    (208) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (209) function_definition -> . declaration_specifiers declarator compound_statement
    (210) function_definition -> . declarator declaration_list compound_statement
    (211) function_definition -> . declarator compound_statement
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 14
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    function_definition            shift and go to state 1
    declaration_specifiers         shift and go to state 4
    type_qualifier                 shift and go to state 20
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    declaration                    shift and go to state 2
    pointer                        shift and go to state 23
    type_specifier                 shift and go to state 24
    enum_specifier                 shift and go to state 27
    external_declaration           shift and go to state 61
    direct_declarator              shift and go to state 29
    declarator                     shift and go to state 11
    struct_or_union_specifier      shift and go to state 17

state 38

    (75) declaration -> declaration_specifiers SEMICOLON .

    L_BRACE         reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    TYPEDEF         reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    EXTERN          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    STATIC          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    AUTO            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    REGISTER        reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    VOID            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    CHAR            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SHORT           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    INT             reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    LONG            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    BOOL            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    FLOAT           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    DOUBLE          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SIGNED          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    UNSIGNED        reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    CONST           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    VOLATILE        reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    ENUM            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    STRUCT          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    UNION           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    R_BRACE         reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    IDENTIFIER      reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    CASE            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    DEFAULT         reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SEMICOLON       reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    IF              reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SWITCH          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    WHILE           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    DO              reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    FOR             reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    GOTO            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    CONTINUE        reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    BREAK           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    RETURN          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    INC_OP          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    DEC_OP          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    SIZEOF          reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    AND             reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    TIMES           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    PLUS            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    MINUS           reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    TILD            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    NOT             reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    CONSTANT        reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    STRING_LITERAL  reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    L_BRACKET       reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)
    $end            reduce using rule 75 (declaration -> declaration_specifiers SEMICOLON .)


state 39

    (76) declaration -> declaration_specifiers init_declarator_list . SEMICOLON
    (84) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMICOLON       shift and go to state 63
    COMMA           shift and go to state 62


state 40

    (83) init_declarator_list -> init_declarator .

    SEMICOLON       reduce using rule 83 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 83 (init_declarator_list -> init_declarator .)


state 41

    (208) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (209) function_definition -> declaration_specifiers declarator . compound_statement
    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . EQUALS initializer
    (186) declaration_list -> . declaration
    (187) declaration_list -> . declaration_list declaration
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    SEMICOLON       reduce using rule 85 (init_declarator -> declarator .)
    COMMA           reduce using rule 85 (init_declarator -> declarator .)
    EQUALS          shift and go to state 64
    L_BRACE         shift and go to state 49
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    enum_specifier                 shift and go to state 27
    compound_statement             shift and go to state 66
    struct_or_union_specifier      shift and go to state 17
    declaration_specifiers         shift and go to state 45
    type_qualifier                 shift and go to state 20
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    declaration                    shift and go to state 46
    declaration_list               shift and go to state 65
    type_specifier                 shift and go to state 24

state 42

    (143) type_qualifier_list -> type_qualifier .

    TIMES           reduce using rule 143 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 143 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 143 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 143 (type_qualifier_list -> type_qualifier .)
    L_BRACKET       reduce using rule 143 (type_qualifier_list -> type_qualifier .)
    L_HOOK          reduce using rule 143 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 143 (type_qualifier_list -> type_qualifier .)
    R_BRACKET       reduce using rule 143 (type_qualifier_list -> type_qualifier .)


state 43

    (141) pointer -> TIMES pointer .

    IDENTIFIER      reduce using rule 141 (pointer -> TIMES pointer .)
    L_BRACKET       reduce using rule 141 (pointer -> TIMES pointer .)
    L_HOOK          reduce using rule 141 (pointer -> TIMES pointer .)
    COMMA           reduce using rule 141 (pointer -> TIMES pointer .)
    R_BRACKET       reduce using rule 141 (pointer -> TIMES pointer .)


state 44

    (140) pointer -> TIMES type_qualifier_list .
    (142) pointer -> TIMES type_qualifier_list . pointer
    (144) type_qualifier_list -> type_qualifier_list . type_qualifier
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 140 (pointer -> TIMES type_qualifier_list .)
    L_BRACKET       reduce using rule 140 (pointer -> TIMES type_qualifier_list .)
    L_HOOK          reduce using rule 140 (pointer -> TIMES type_qualifier_list .)
    COMMA           reduce using rule 140 (pointer -> TIMES type_qualifier_list .)
    R_BRACKET       reduce using rule 140 (pointer -> TIMES type_qualifier_list .)
    TIMES           shift and go to state 10
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25

    type_qualifier                 shift and go to state 67
    pointer                        shift and go to state 68

state 45

    (75) declaration -> declaration_specifiers . SEMICOLON
    (76) declaration -> declaration_specifiers . init_declarator_list SEMICOLON
    (83) init_declarator_list -> . init_declarator
    (84) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET

    SEMICOLON       shift and go to state 38
    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 14

    init_declarator                shift and go to state 40
    direct_declarator              shift and go to state 29
    pointer                        shift and go to state 23
    init_declarator_list           shift and go to state 39
    declarator                     shift and go to state 69

state 46

    (186) declaration_list -> declaration .

    L_BRACE         reduce using rule 186 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 186 (declaration_list -> declaration .)
    EXTERN          reduce using rule 186 (declaration_list -> declaration .)
    STATIC          reduce using rule 186 (declaration_list -> declaration .)
    AUTO            reduce using rule 186 (declaration_list -> declaration .)
    REGISTER        reduce using rule 186 (declaration_list -> declaration .)
    VOID            reduce using rule 186 (declaration_list -> declaration .)
    CHAR            reduce using rule 186 (declaration_list -> declaration .)
    SHORT           reduce using rule 186 (declaration_list -> declaration .)
    INT             reduce using rule 186 (declaration_list -> declaration .)
    LONG            reduce using rule 186 (declaration_list -> declaration .)
    BOOL            reduce using rule 186 (declaration_list -> declaration .)
    FLOAT           reduce using rule 186 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 186 (declaration_list -> declaration .)
    SIGNED          reduce using rule 186 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 186 (declaration_list -> declaration .)
    CONST           reduce using rule 186 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 186 (declaration_list -> declaration .)
    ENUM            reduce using rule 186 (declaration_list -> declaration .)
    STRUCT          reduce using rule 186 (declaration_list -> declaration .)
    UNION           reduce using rule 186 (declaration_list -> declaration .)
    R_BRACE         reduce using rule 186 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 186 (declaration_list -> declaration .)
    CASE            reduce using rule 186 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 186 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 186 (declaration_list -> declaration .)
    IF              reduce using rule 186 (declaration_list -> declaration .)
    SWITCH          reduce using rule 186 (declaration_list -> declaration .)
    WHILE           reduce using rule 186 (declaration_list -> declaration .)
    DO              reduce using rule 186 (declaration_list -> declaration .)
    FOR             reduce using rule 186 (declaration_list -> declaration .)
    GOTO            reduce using rule 186 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 186 (declaration_list -> declaration .)
    BREAK           reduce using rule 186 (declaration_list -> declaration .)
    RETURN          reduce using rule 186 (declaration_list -> declaration .)
    INC_OP          reduce using rule 186 (declaration_list -> declaration .)
    DEC_OP          reduce using rule 186 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 186 (declaration_list -> declaration .)
    AND             reduce using rule 186 (declaration_list -> declaration .)
    TIMES           reduce using rule 186 (declaration_list -> declaration .)
    PLUS            reduce using rule 186 (declaration_list -> declaration .)
    MINUS           reduce using rule 186 (declaration_list -> declaration .)
    TILD            reduce using rule 186 (declaration_list -> declaration .)
    NOT             reduce using rule 186 (declaration_list -> declaration .)
    CONSTANT        reduce using rule 186 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 186 (declaration_list -> declaration .)
    L_BRACKET       reduce using rule 186 (declaration_list -> declaration .)


state 47

    (210) function_definition -> declarator declaration_list . compound_statement
    (187) declaration_list -> declaration_list . declaration
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    L_BRACE         shift and go to state 49
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    enum_specifier                 shift and go to state 27
    compound_statement             shift and go to state 71
    struct_or_union_specifier      shift and go to state 17
    declaration_specifiers         shift and go to state 45
    type_qualifier                 shift and go to state 20
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    declaration                    shift and go to state 70
    type_specifier                 shift and go to state 24

state 48

    (211) function_definition -> declarator compound_statement .

    TYPEDEF         reduce using rule 211 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 211 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 211 (function_definition -> declarator compound_statement .)
    AUTO            reduce using rule 211 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 211 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 211 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 211 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 211 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 211 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 211 (function_definition -> declarator compound_statement .)
    BOOL            reduce using rule 211 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 211 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 211 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 211 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 211 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 211 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 211 (function_definition -> declarator compound_statement .)
    TIMES           reduce using rule 211 (function_definition -> declarator compound_statement .)
    IDENTIFIER      reduce using rule 211 (function_definition -> declarator compound_statement .)
    L_BRACKET       reduce using rule 211 (function_definition -> declarator compound_statement .)
    ENUM            reduce using rule 211 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 211 (function_definition -> declarator compound_statement .)
    UNION           reduce using rule 211 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 211 (function_definition -> declarator compound_statement .)


state 49

    (182) compound_statement -> L_BRACE . R_BRACE
    (183) compound_statement -> L_BRACE . statement_list R_BRACE
    (184) compound_statement -> L_BRACE . declaration_list R_BRACE
    (185) compound_statement -> L_BRACE . declaration_list statement_list R_BRACE
    (188) statement_list -> . statement
    (189) statement_list -> . statement_list statement
    (186) declaration_list -> . declaration
    (187) declaration_list -> . declaration_list declaration
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    R_BRACE         shift and go to state 101
    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    struct_or_union_specifier      shift and go to state 17
    declaration_specifiers         shift and go to state 45
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    type_qualifier                 shift and go to state 20
    statement_list                 shift and go to state 87
    struct_or_union                shift and go to state 34
    enum_specifier                 shift and go to state 27
    declaration                    shift and go to state 46
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    declaration_list               shift and go to state 118
    type_specifier                 shift and go to state 24
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    logical_and_expression         shift and go to state 94
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    relational_expression          shift and go to state 119
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 93
    exclusive_or_expression        shift and go to state 109
    expression                     shift and go to state 84
    jump_statement                 shift and go to state 110
    storage_class_specifier        shift and go to state 22

state 50

    (133) direct_declarator -> L_BRACKET declarator . R_BRACKET

    R_BRACKET       shift and go to state 125


state 51

    (82) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMICOLON       reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    TIMES           reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    L_BRACKET       reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    L_HOOK          reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    R_BRACKET       reduce using rule 82 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 52

    (78) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    TIMES           reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    L_BRACKET       reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    L_HOOK          reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    R_BRACKET       reduce using rule 78 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 53

    (130) declarator -> pointer direct_declarator .
    (134) direct_declarator -> direct_declarator . L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> direct_declarator . L_HOOK R_HOOK
    (136) direct_declarator -> direct_declarator . L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> direct_declarator . L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> direct_declarator . L_BRACKET R_BRACKET

    EQUALS          reduce using rule 130 (declarator -> pointer direct_declarator .)
    SEMICOLON       reduce using rule 130 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 130 (declarator -> pointer direct_declarator .)
    R_BRACKET       reduce using rule 130 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 130 (declarator -> pointer direct_declarator .)
    L_BRACE         reduce using rule 130 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 130 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 130 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 130 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 130 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 130 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 130 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 130 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 130 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 130 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 130 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 130 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 130 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 130 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 130 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 130 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 130 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 130 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 130 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 130 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 130 (declarator -> pointer direct_declarator .)
    L_HOOK          shift and go to state 55
    L_BRACKET       shift and go to state 56


state 54

    (80) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMICOLON       reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    TIMES           reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    L_BRACKET       reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    L_HOOK          reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)
    R_BRACKET       reduce using rule 80 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 55

    (134) direct_declarator -> direct_declarator L_HOOK . constant_expression R_HOOK
    (135) direct_declarator -> direct_declarator L_HOOK . R_HOOK
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    R_HOOK          shift and go to state 129
    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    inclusive_or_expression        shift and go to state 106
    unary_operator                 shift and go to state 105
    conditional_expression         shift and go to state 126
    additive_expression            shift and go to state 95
    and_expression                 shift and go to state 97
    constant_expression            shift and go to state 130
    equality_expression            shift and go to state 117
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109

state 56

    (136) direct_declarator -> direct_declarator L_BRACKET . parameter_type_list R_BRACKET
    (137) direct_declarator -> direct_declarator L_BRACKET . identifier_list R_BRACKET
    (138) direct_declarator -> direct_declarator L_BRACKET . R_BRACKET
    (145) parameter_type_list -> . parameter_list
    (146) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (152) identifier_list -> . IDENTIFIER
    (153) identifier_list -> . identifier_list COMMA IDENTIFIER
    (147) parameter_list -> . parameter_declaration
    (148) parameter_list -> . parameter_list COMMA parameter_declaration
    (149) parameter_declaration -> . declaration_specifiers declarator
    (150) parameter_declaration -> . declaration_specifiers abstract_declarator
    (151) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    R_BRACKET       shift and go to state 138
    IDENTIFIER      shift and go to state 136
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    enum_specifier                 shift and go to state 27
    parameter_declaration          shift and go to state 135
    identifier_list                shift and go to state 132
    declaration_specifiers         shift and go to state 133
    struct_or_union_specifier      shift and go to state 17
    type_qualifier                 shift and go to state 20
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    parameter_list                 shift and go to state 134
    parameter_type_list            shift and go to state 137
    type_specifier                 shift and go to state 24

state 57

    (105) struct_or_union_specifier -> struct_or_union L_BRACE . struct_declaration_list R_BRACE
    (109) struct_declaration_list -> . struct_declaration
    (110) struct_declaration_list -> . struct_declaration_list struct_declaration
    (111) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (112) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (113) specifier_qualifier_list -> . type_specifier
    (114) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    type_qualifier                 shift and go to state 139
    type_specifier                 shift and go to state 141
    struct_or_union                shift and go to state 34
    enum_specifier                 shift and go to state 27
    struct_declaration             shift and go to state 142
    struct_declaration_list        shift and go to state 143
    struct_or_union_specifier      shift and go to state 17
    specifier_qualifier_list       shift and go to state 140

state 58

    (104) struct_or_union_specifier -> struct_or_union IDENTIFIER . L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    L_BRACE         shift and go to state 144
    VOID            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TIMES           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    L_BRACKET       reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TYPEDEF         reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SEMICOLON       reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    L_HOOK          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    R_BRACKET       reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 59

    (122) enum_specifier -> ENUM IDENTIFIER . L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> ENUM IDENTIFIER .

    L_BRACE         shift and go to state 145
    TYPEDEF         reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    SEMICOLON       reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    TIMES           reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    L_BRACKET       reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    L_HOOK          reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    R_BRACKET       reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 123 (enum_specifier -> ENUM IDENTIFIER .)


state 60

    (121) enum_specifier -> ENUM L_BRACE . enumerator_list R_BRACE
    (124) enumerator_list -> . enumerator
    (125) enumerator_list -> . enumerator_list COMMA enumerator
    (126) enumerator -> . IDENTIFIER
    (127) enumerator -> . IDENTIFIER EQUALS constant_expression

    IDENTIFIER      shift and go to state 146

    enumerator_list                shift and go to state 147
    enumerator                     shift and go to state 148

state 61

    (205) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    TIMES           reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    IDENTIFIER      reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    L_BRACKET       reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 205 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 205 (translation_unit -> translation_unit external_declaration .)


state 62

    (84) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (85) init_declarator -> . declarator
    (86) init_declarator -> . declarator EQUALS initializer
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET

    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 14

    init_declarator                shift and go to state 149
    direct_declarator              shift and go to state 29
    pointer                        shift and go to state 23
    declarator                     shift and go to state 69

state 63

    (76) declaration -> declaration_specifiers init_declarator_list SEMICOLON .

    L_BRACE         reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TYPEDEF         reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    EXTERN          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STATIC          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AUTO            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    REGISTER        reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOID            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CHAR            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SHORT           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INT             reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    LONG            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BOOL            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONST           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    ENUM            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    UNION           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    R_BRACE         reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CASE            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEFAULT         reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SEMICOLON       reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    IF              reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SWITCH          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    WHILE           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DO              reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    FOR             reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    GOTO            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONTINUE        reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    BREAK           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    RETURN          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    INC_OP          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    DEC_OP          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    SIZEOF          reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    AND             reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TIMES           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    PLUS            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    MINUS           reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    TILD            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    NOT             reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    CONSTANT        reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    L_BRACKET       reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)
    $end            reduce using rule 76 (declaration -> declaration_specifiers init_declarator_list SEMICOLON .)


state 64

    (86) init_declarator -> declarator EQUALS . initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . L_BRACE initializer_list R_BRACE
    (170) initializer -> . L_BRACE initializer_list COMMA R_BRACE
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    L_BRACE         shift and go to state 150
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    initializer                    shift and go to state 152
    shift_expression               shift and go to state 115
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 151
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94

state 65

    (208) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (187) declaration_list -> declaration_list . declaration
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    L_BRACE         shift and go to state 49
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    enum_specifier                 shift and go to state 27
    compound_statement             shift and go to state 153
    struct_or_union_specifier      shift and go to state 17
    declaration_specifiers         shift and go to state 45
    type_qualifier                 shift and go to state 20
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    declaration                    shift and go to state 70
    type_specifier                 shift and go to state 24

state 66

    (209) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    TIMES           reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    IDENTIFIER      reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    L_BRACKET       reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)


state 67

    (144) type_qualifier_list -> type_qualifier_list type_qualifier .

    TIMES           reduce using rule 144 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 144 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 144 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 144 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    L_BRACKET       reduce using rule 144 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    L_HOOK          reduce using rule 144 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 144 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    R_BRACKET       reduce using rule 144 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 68

    (142) pointer -> TIMES type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 142 (pointer -> TIMES type_qualifier_list pointer .)
    L_BRACKET       reduce using rule 142 (pointer -> TIMES type_qualifier_list pointer .)
    L_HOOK          reduce using rule 142 (pointer -> TIMES type_qualifier_list pointer .)
    COMMA           reduce using rule 142 (pointer -> TIMES type_qualifier_list pointer .)
    R_BRACKET       reduce using rule 142 (pointer -> TIMES type_qualifier_list pointer .)


state 69

    (85) init_declarator -> declarator .
    (86) init_declarator -> declarator . EQUALS initializer

    SEMICOLON       reduce using rule 85 (init_declarator -> declarator .)
    COMMA           reduce using rule 85 (init_declarator -> declarator .)
    EQUALS          shift and go to state 64


state 70

    (187) declaration_list -> declaration_list declaration .

    L_BRACE         reduce using rule 187 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 187 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 187 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 187 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 187 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 187 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 187 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 187 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 187 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 187 (declaration_list -> declaration_list declaration .)
    R_BRACE         reduce using rule 187 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 187 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 187 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 187 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 187 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 187 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 187 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 187 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 187 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 187 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    INC_OP          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    DEC_OP          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 187 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 187 (declaration_list -> declaration_list declaration .)
    TIMES           reduce using rule 187 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 187 (declaration_list -> declaration_list declaration .)
    TILD            reduce using rule 187 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 187 (declaration_list -> declaration_list declaration .)
    CONSTANT        reduce using rule 187 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 187 (declaration_list -> declaration_list declaration .)
    L_BRACKET       reduce using rule 187 (declaration_list -> declaration_list declaration .)


state 71

    (210) function_definition -> declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    STATIC          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    AUTO            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    BOOL            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    CONST           reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    TIMES           reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    L_BRACKET       reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    ENUM            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    UNION           reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)


state 72

    (5) postfix_expression -> primary_expression .

    L_BRACE         reduce using rule 5 (postfix_expression -> primary_expression .)
    L_BRACKET       reduce using rule 5 (postfix_expression -> primary_expression .)
    POINT           reduce using rule 5 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 5 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 5 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 5 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 5 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 5 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 5 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 5 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 5 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 5 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 5 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 5 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 5 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 5 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 5 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 5 (postfix_expression -> primary_expression .)
    INF             reduce using rule 5 (postfix_expression -> primary_expression .)
    SUP             reduce using rule 5 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 5 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 5 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 5 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 5 (postfix_expression -> primary_expression .)
    AND             reduce using rule 5 (postfix_expression -> primary_expression .)
    EXOR            reduce using rule 5 (postfix_expression -> primary_expression .)
    OR              reduce using rule 5 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 5 (postfix_expression -> primary_expression .)
    INTER           reduce using rule 5 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 5 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 5 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 5 (postfix_expression -> primary_expression .)
    R_BRACKET       reduce using rule 5 (postfix_expression -> primary_expression .)
    R_HOOK          reduce using rule 5 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 5 (postfix_expression -> primary_expression .)
    R_BRACE         reduce using rule 5 (postfix_expression -> primary_expression .)


state 73

    (59) assignment_expression -> conditional_expression .

    SEMICOLON       reduce using rule 59 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 59 (assignment_expression -> conditional_expression .)
    R_BRACKET       reduce using rule 59 (assignment_expression -> conditional_expression .)
    R_BRACE         reduce using rule 59 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 59 (assignment_expression -> conditional_expression .)


state 74

    (196) iteration_statement -> DO . statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 154
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 75

    (17) unary_expression -> DEC_OP . unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 155

    unary_expression               shift and go to state 156
    postfix_expression             shift and go to state 83
    unary_operator                 shift and go to state 105
    primary_expression             shift and go to state 72

state 76

    (195) iteration_statement -> WHILE . L_BRACKET expression R_BRACKET statement

    L_BRACKET       shift and go to state 157


state 77

    (57) conditional_expression -> logical_or_expression .
    (58) conditional_expression -> logical_or_expression . INTER expression COLON conditional_expression
    (56) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    R_BRACKET       reduce using rule 57 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 57 (conditional_expression -> logical_or_expression .)
    SEMICOLON       reduce using rule 57 (conditional_expression -> logical_or_expression .)
    R_BRACE         reduce using rule 57 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 57 (conditional_expression -> logical_or_expression .)
    R_HOOK          reduce using rule 57 (conditional_expression -> logical_or_expression .)
    INTER           shift and go to state 158
    OR_OP           shift and go to state 159


state 78

    (197) iteration_statement -> FOR . L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> FOR . L_BRACKET expression_statement expression_statement expression R_BRACKET statement

    L_BRACKET       shift and go to state 160


state 79

    (174) statement -> compound_statement .

    R_BRACE         reduce using rule 174 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 174 (statement -> compound_statement .)
    CASE            reduce using rule 174 (statement -> compound_statement .)
    DEFAULT         reduce using rule 174 (statement -> compound_statement .)
    L_BRACE         reduce using rule 174 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 174 (statement -> compound_statement .)
    IF              reduce using rule 174 (statement -> compound_statement .)
    SWITCH          reduce using rule 174 (statement -> compound_statement .)
    WHILE           reduce using rule 174 (statement -> compound_statement .)
    DO              reduce using rule 174 (statement -> compound_statement .)
    FOR             reduce using rule 174 (statement -> compound_statement .)
    GOTO            reduce using rule 174 (statement -> compound_statement .)
    CONTINUE        reduce using rule 174 (statement -> compound_statement .)
    BREAK           reduce using rule 174 (statement -> compound_statement .)
    RETURN          reduce using rule 174 (statement -> compound_statement .)
    INC_OP          reduce using rule 174 (statement -> compound_statement .)
    DEC_OP          reduce using rule 174 (statement -> compound_statement .)
    SIZEOF          reduce using rule 174 (statement -> compound_statement .)
    AND             reduce using rule 174 (statement -> compound_statement .)
    TIMES           reduce using rule 174 (statement -> compound_statement .)
    PLUS            reduce using rule 174 (statement -> compound_statement .)
    MINUS           reduce using rule 174 (statement -> compound_statement .)
    TILD            reduce using rule 174 (statement -> compound_statement .)
    NOT             reduce using rule 174 (statement -> compound_statement .)
    CONSTANT        reduce using rule 174 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 174 (statement -> compound_statement .)
    L_BRACKET       reduce using rule 174 (statement -> compound_statement .)
    ELSE            reduce using rule 174 (statement -> compound_statement .)


state 80

    (22) unary_operator -> TIMES .

    L_BRACKET       reduce using rule 22 (unary_operator -> TIMES .)
    INC_OP          reduce using rule 22 (unary_operator -> TIMES .)
    DEC_OP          reduce using rule 22 (unary_operator -> TIMES .)
    SIZEOF          reduce using rule 22 (unary_operator -> TIMES .)
    AND             reduce using rule 22 (unary_operator -> TIMES .)
    TIMES           reduce using rule 22 (unary_operator -> TIMES .)
    PLUS            reduce using rule 22 (unary_operator -> TIMES .)
    MINUS           reduce using rule 22 (unary_operator -> TIMES .)
    TILD            reduce using rule 22 (unary_operator -> TIMES .)
    NOT             reduce using rule 22 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 22 (unary_operator -> TIMES .)
    CONSTANT        reduce using rule 22 (unary_operator -> TIMES .)
    STRING_LITERAL  reduce using rule 22 (unary_operator -> TIMES .)


state 81

    (173) statement -> labeled_statement .

    R_BRACE         reduce using rule 173 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 173 (statement -> labeled_statement .)
    CASE            reduce using rule 173 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 173 (statement -> labeled_statement .)
    L_BRACE         reduce using rule 173 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 173 (statement -> labeled_statement .)
    IF              reduce using rule 173 (statement -> labeled_statement .)
    SWITCH          reduce using rule 173 (statement -> labeled_statement .)
    WHILE           reduce using rule 173 (statement -> labeled_statement .)
    DO              reduce using rule 173 (statement -> labeled_statement .)
    FOR             reduce using rule 173 (statement -> labeled_statement .)
    GOTO            reduce using rule 173 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 173 (statement -> labeled_statement .)
    BREAK           reduce using rule 173 (statement -> labeled_statement .)
    RETURN          reduce using rule 173 (statement -> labeled_statement .)
    INC_OP          reduce using rule 173 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 173 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 173 (statement -> labeled_statement .)
    AND             reduce using rule 173 (statement -> labeled_statement .)
    TIMES           reduce using rule 173 (statement -> labeled_statement .)
    PLUS            reduce using rule 173 (statement -> labeled_statement .)
    MINUS           reduce using rule 173 (statement -> labeled_statement .)
    TILD            reduce using rule 173 (statement -> labeled_statement .)
    NOT             reduce using rule 173 (statement -> labeled_statement .)
    CONSTANT        reduce using rule 173 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 173 (statement -> labeled_statement .)
    L_BRACKET       reduce using rule 173 (statement -> labeled_statement .)
    ELSE            reduce using rule 173 (statement -> labeled_statement .)


state 82

    (21) unary_operator -> AND .

    L_BRACKET       reduce using rule 21 (unary_operator -> AND .)
    INC_OP          reduce using rule 21 (unary_operator -> AND .)
    DEC_OP          reduce using rule 21 (unary_operator -> AND .)
    SIZEOF          reduce using rule 21 (unary_operator -> AND .)
    AND             reduce using rule 21 (unary_operator -> AND .)
    TIMES           reduce using rule 21 (unary_operator -> AND .)
    PLUS            reduce using rule 21 (unary_operator -> AND .)
    MINUS           reduce using rule 21 (unary_operator -> AND .)
    TILD            reduce using rule 21 (unary_operator -> AND .)
    NOT             reduce using rule 21 (unary_operator -> AND .)
    IDENTIFIER      reduce using rule 21 (unary_operator -> AND .)
    CONSTANT        reduce using rule 21 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 21 (unary_operator -> AND .)


state 83

    (15) unary_expression -> postfix_expression .
    (6) postfix_expression -> postfix_expression . L_BRACE expression R_BRACE
    (7) postfix_expression -> postfix_expression . L_BRACKET R_BRACKET
    (8) postfix_expression -> postfix_expression . L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> postfix_expression . POINT IDENTIFIER
    (10) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (11) postfix_expression -> postfix_expression . INC_OP
    (12) postfix_expression -> postfix_expression . DEC_OP

    TIMES           reduce using rule 15 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 15 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 15 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 15 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 15 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 15 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 15 (unary_expression -> postfix_expression .)
    INF             reduce using rule 15 (unary_expression -> postfix_expression .)
    SUP             reduce using rule 15 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 15 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 15 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 15 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 15 (unary_expression -> postfix_expression .)
    AND             reduce using rule 15 (unary_expression -> postfix_expression .)
    EXOR            reduce using rule 15 (unary_expression -> postfix_expression .)
    OR              reduce using rule 15 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 15 (unary_expression -> postfix_expression .)
    INTER           reduce using rule 15 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 15 (unary_expression -> postfix_expression .)
    R_HOOK          reduce using rule 15 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 15 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 15 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 15 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 15 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 15 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 15 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 15 (unary_expression -> postfix_expression .)
    R_BRACKET       reduce using rule 15 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 15 (unary_expression -> postfix_expression .)
    R_BRACE         reduce using rule 15 (unary_expression -> postfix_expression .)
    L_BRACE         shift and go to state 165
    L_BRACKET       shift and go to state 161
    POINT           shift and go to state 162
    PTR_OP          shift and go to state 166
    INC_OP          shift and go to state 164
    DEC_OP          shift and go to state 163


state 84

    (191) expression_statement -> expression . SEMICOLON
    (73) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 167
    COMMA           shift and go to state 168


state 85

    (176) statement -> selection_statement .

    R_BRACE         reduce using rule 176 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 176 (statement -> selection_statement .)
    CASE            reduce using rule 176 (statement -> selection_statement .)
    DEFAULT         reduce using rule 176 (statement -> selection_statement .)
    L_BRACE         reduce using rule 176 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 176 (statement -> selection_statement .)
    IF              reduce using rule 176 (statement -> selection_statement .)
    SWITCH          reduce using rule 176 (statement -> selection_statement .)
    WHILE           reduce using rule 176 (statement -> selection_statement .)
    DO              reduce using rule 176 (statement -> selection_statement .)
    FOR             reduce using rule 176 (statement -> selection_statement .)
    GOTO            reduce using rule 176 (statement -> selection_statement .)
    CONTINUE        reduce using rule 176 (statement -> selection_statement .)
    BREAK           reduce using rule 176 (statement -> selection_statement .)
    RETURN          reduce using rule 176 (statement -> selection_statement .)
    INC_OP          reduce using rule 176 (statement -> selection_statement .)
    DEC_OP          reduce using rule 176 (statement -> selection_statement .)
    SIZEOF          reduce using rule 176 (statement -> selection_statement .)
    AND             reduce using rule 176 (statement -> selection_statement .)
    TIMES           reduce using rule 176 (statement -> selection_statement .)
    PLUS            reduce using rule 176 (statement -> selection_statement .)
    MINUS           reduce using rule 176 (statement -> selection_statement .)
    TILD            reduce using rule 176 (statement -> selection_statement .)
    NOT             reduce using rule 176 (statement -> selection_statement .)
    CONSTANT        reduce using rule 176 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 176 (statement -> selection_statement .)
    L_BRACKET       reduce using rule 176 (statement -> selection_statement .)
    ELSE            reduce using rule 176 (statement -> selection_statement .)


state 86

    (194) selection_statement -> SWITCH . L_BRACKET expression R_BRACKET statement

    L_BRACKET       shift and go to state 169


state 87

    (183) compound_statement -> L_BRACE statement_list . R_BRACE
    (189) statement_list -> statement_list . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    R_BRACE         shift and go to state 170
    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 171
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 88

    (23) unary_operator -> PLUS .

    L_BRACKET       reduce using rule 23 (unary_operator -> PLUS .)
    INC_OP          reduce using rule 23 (unary_operator -> PLUS .)
    DEC_OP          reduce using rule 23 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 23 (unary_operator -> PLUS .)
    AND             reduce using rule 23 (unary_operator -> PLUS .)
    TIMES           reduce using rule 23 (unary_operator -> PLUS .)
    PLUS            reduce using rule 23 (unary_operator -> PLUS .)
    MINUS           reduce using rule 23 (unary_operator -> PLUS .)
    TILD            reduce using rule 23 (unary_operator -> PLUS .)
    NOT             reduce using rule 23 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 23 (unary_operator -> PLUS .)
    CONSTANT        reduce using rule 23 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 23 (unary_operator -> PLUS .)


state 89

    (190) expression_statement -> SEMICOLON .

    R_BRACE         reduce using rule 190 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 190 (expression_statement -> SEMICOLON .)
    CASE            reduce using rule 190 (expression_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 190 (expression_statement -> SEMICOLON .)
    L_BRACE         reduce using rule 190 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 190 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 190 (expression_statement -> SEMICOLON .)
    SWITCH          reduce using rule 190 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 190 (expression_statement -> SEMICOLON .)
    DO              reduce using rule 190 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 190 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 190 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 190 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 190 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 190 (expression_statement -> SEMICOLON .)
    INC_OP          reduce using rule 190 (expression_statement -> SEMICOLON .)
    DEC_OP          reduce using rule 190 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 190 (expression_statement -> SEMICOLON .)
    AND             reduce using rule 190 (expression_statement -> SEMICOLON .)
    TIMES           reduce using rule 190 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 190 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 190 (expression_statement -> SEMICOLON .)
    TILD            reduce using rule 190 (expression_statement -> SEMICOLON .)
    NOT             reduce using rule 190 (expression_statement -> SEMICOLON .)
    CONSTANT        reduce using rule 190 (expression_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 190 (expression_statement -> SEMICOLON .)
    L_BRACKET       reduce using rule 190 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 190 (expression_statement -> SEMICOLON .)
    R_BRACKET       reduce using rule 190 (expression_statement -> SEMICOLON .)


state 90

    (29) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 29 (multiplicative_expression -> cast_expression .)
    MOD             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 29 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 29 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 29 (multiplicative_expression -> cast_expression .)
    INF             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    SUP             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 29 (multiplicative_expression -> cast_expression .)
    EXOR            reduce using rule 29 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 29 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 29 (multiplicative_expression -> cast_expression .)
    INTER           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    R_BRACKET       reduce using rule 29 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 29 (multiplicative_expression -> cast_expression .)
    R_HOOK          reduce using rule 29 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 29 (multiplicative_expression -> cast_expression .)
    R_BRACE         reduce using rule 29 (multiplicative_expression -> cast_expression .)


state 91

    (202) jump_statement -> RETURN . SEMICOLON
    (203) jump_statement -> RETURN . expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    SEMICOLON       shift and go to state 172
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    unary_expression               shift and go to state 92
    primary_expression             shift and go to state 72
    assignment_expression          shift and go to state 104
    conditional_expression         shift and go to state 73
    unary_operator                 shift and go to state 105
    and_expression                 shift and go to state 97
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    additive_expression            shift and go to state 95
    equality_expression            shift and go to state 117
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    expression                     shift and go to state 173
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    exclusive_or_expression        shift and go to state 109
    cast_expression                shift and go to state 90

state 92

    (60) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (27) cast_expression -> unary_expression .
    (61) assignment_operator -> . EQUALS
    (62) assignment_operator -> . MUL_ASSIGN
    (63) assignment_operator -> . DIV_ASSIGN
    (64) assignment_operator -> . MOD_ASSIGN
    (65) assignment_operator -> . ADD_ASSIGN
    (66) assignment_operator -> . SUB_ASSIGN
    (67) assignment_operator -> . LEFT_ASSIGN
    (68) assignment_operator -> . RIGHT_ASSIGN
    (69) assignment_operator -> . AND_ASSIGN
    (70) assignment_operator -> . XOR_ASSIGN
    (71) assignment_operator -> . OR_ASSIGN

    TIMES           reduce using rule 27 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 27 (cast_expression -> unary_expression .)
    MOD             reduce using rule 27 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 27 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 27 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 27 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 27 (cast_expression -> unary_expression .)
    INF             reduce using rule 27 (cast_expression -> unary_expression .)
    SUP             reduce using rule 27 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    AND             reduce using rule 27 (cast_expression -> unary_expression .)
    EXOR            reduce using rule 27 (cast_expression -> unary_expression .)
    OR              reduce using rule 27 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 27 (cast_expression -> unary_expression .)
    INTER           reduce using rule 27 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    COLON           reduce using rule 27 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 27 (cast_expression -> unary_expression .)
    R_BRACE         reduce using rule 27 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 27 (cast_expression -> unary_expression .)
    R_BRACKET       reduce using rule 27 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 176
    MUL_ASSIGN      shift and go to state 183
    DIV_ASSIGN      shift and go to state 184
    MOD_ASSIGN      shift and go to state 178
    ADD_ASSIGN      shift and go to state 175
    SUB_ASSIGN      shift and go to state 182
    LEFT_ASSIGN     shift and go to state 177
    RIGHT_ASSIGN    shift and go to state 174
    AND_ASSIGN      shift and go to state 179
    XOR_ASSIGN      shift and go to state 181
    OR_ASSIGN       shift and go to state 180

    assignment_operator            shift and go to state 185

state 93

    (188) statement_list -> statement .

    R_BRACE         reduce using rule 188 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 188 (statement_list -> statement .)
    CASE            reduce using rule 188 (statement_list -> statement .)
    DEFAULT         reduce using rule 188 (statement_list -> statement .)
    L_BRACE         reduce using rule 188 (statement_list -> statement .)
    SEMICOLON       reduce using rule 188 (statement_list -> statement .)
    IF              reduce using rule 188 (statement_list -> statement .)
    SWITCH          reduce using rule 188 (statement_list -> statement .)
    WHILE           reduce using rule 188 (statement_list -> statement .)
    DO              reduce using rule 188 (statement_list -> statement .)
    FOR             reduce using rule 188 (statement_list -> statement .)
    GOTO            reduce using rule 188 (statement_list -> statement .)
    CONTINUE        reduce using rule 188 (statement_list -> statement .)
    BREAK           reduce using rule 188 (statement_list -> statement .)
    RETURN          reduce using rule 188 (statement_list -> statement .)
    INC_OP          reduce using rule 188 (statement_list -> statement .)
    DEC_OP          reduce using rule 188 (statement_list -> statement .)
    SIZEOF          reduce using rule 188 (statement_list -> statement .)
    AND             reduce using rule 188 (statement_list -> statement .)
    TIMES           reduce using rule 188 (statement_list -> statement .)
    PLUS            reduce using rule 188 (statement_list -> statement .)
    MINUS           reduce using rule 188 (statement_list -> statement .)
    TILD            reduce using rule 188 (statement_list -> statement .)
    NOT             reduce using rule 188 (statement_list -> statement .)
    CONSTANT        reduce using rule 188 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 188 (statement_list -> statement .)
    L_BRACKET       reduce using rule 188 (statement_list -> statement .)


state 94

    (55) logical_or_expression -> logical_and_expression .
    (54) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    INTER           reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    R_BRACKET       reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    R_BRACE         reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    R_HOOK          reduce using rule 55 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 186


state 95

    (36) shift_expression -> additive_expression .
    (34) additive_expression -> additive_expression . PLUS multiplicative_expression
    (35) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 36 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 36 (shift_expression -> additive_expression .)
    INF             reduce using rule 36 (shift_expression -> additive_expression .)
    SUP             reduce using rule 36 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 36 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 36 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 36 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 36 (shift_expression -> additive_expression .)
    AND             reduce using rule 36 (shift_expression -> additive_expression .)
    EXOR            reduce using rule 36 (shift_expression -> additive_expression .)
    OR              reduce using rule 36 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 36 (shift_expression -> additive_expression .)
    INTER           reduce using rule 36 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 36 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 36 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 36 (shift_expression -> additive_expression .)
    R_BRACKET       reduce using rule 36 (shift_expression -> additive_expression .)
    R_HOOK          reduce using rule 36 (shift_expression -> additive_expression .)
    COLON           reduce using rule 36 (shift_expression -> additive_expression .)
    R_BRACE         reduce using rule 36 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 188
    MINUS           shift and go to state 187


state 96

    (175) statement -> expression_statement .

    R_BRACE         reduce using rule 175 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 175 (statement -> expression_statement .)
    CASE            reduce using rule 175 (statement -> expression_statement .)
    DEFAULT         reduce using rule 175 (statement -> expression_statement .)
    L_BRACE         reduce using rule 175 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 175 (statement -> expression_statement .)
    IF              reduce using rule 175 (statement -> expression_statement .)
    SWITCH          reduce using rule 175 (statement -> expression_statement .)
    WHILE           reduce using rule 175 (statement -> expression_statement .)
    DO              reduce using rule 175 (statement -> expression_statement .)
    FOR             reduce using rule 175 (statement -> expression_statement .)
    GOTO            reduce using rule 175 (statement -> expression_statement .)
    CONTINUE        reduce using rule 175 (statement -> expression_statement .)
    BREAK           reduce using rule 175 (statement -> expression_statement .)
    RETURN          reduce using rule 175 (statement -> expression_statement .)
    INC_OP          reduce using rule 175 (statement -> expression_statement .)
    DEC_OP          reduce using rule 175 (statement -> expression_statement .)
    SIZEOF          reduce using rule 175 (statement -> expression_statement .)
    AND             reduce using rule 175 (statement -> expression_statement .)
    TIMES           reduce using rule 175 (statement -> expression_statement .)
    PLUS            reduce using rule 175 (statement -> expression_statement .)
    MINUS           reduce using rule 175 (statement -> expression_statement .)
    TILD            reduce using rule 175 (statement -> expression_statement .)
    NOT             reduce using rule 175 (statement -> expression_statement .)
    CONSTANT        reduce using rule 175 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 175 (statement -> expression_statement .)
    L_BRACKET       reduce using rule 175 (statement -> expression_statement .)
    ELSE            reduce using rule 175 (statement -> expression_statement .)


state 97

    (49) exclusive_or_expression -> and_expression .
    (48) and_expression -> and_expression . AND equality_expression

    EXOR            reduce using rule 49 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 49 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 49 (exclusive_or_expression -> and_expression .)
    INTER           reduce using rule 49 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 49 (exclusive_or_expression -> and_expression .)
    R_BRACE         reduce using rule 49 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 49 (exclusive_or_expression -> and_expression .)
    R_BRACKET       reduce using rule 49 (exclusive_or_expression -> and_expression .)
    SEMICOLON       reduce using rule 49 (exclusive_or_expression -> and_expression .)
    R_HOOK          reduce using rule 49 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 49 (exclusive_or_expression -> and_expression .)
    AND             shift and go to state 189


state 98

    (25) unary_operator -> TILD .

    L_BRACKET       reduce using rule 25 (unary_operator -> TILD .)
    INC_OP          reduce using rule 25 (unary_operator -> TILD .)
    DEC_OP          reduce using rule 25 (unary_operator -> TILD .)
    SIZEOF          reduce using rule 25 (unary_operator -> TILD .)
    AND             reduce using rule 25 (unary_operator -> TILD .)
    TIMES           reduce using rule 25 (unary_operator -> TILD .)
    PLUS            reduce using rule 25 (unary_operator -> TILD .)
    MINUS           reduce using rule 25 (unary_operator -> TILD .)
    TILD            reduce using rule 25 (unary_operator -> TILD .)
    NOT             reduce using rule 25 (unary_operator -> TILD .)
    IDENTIFIER      reduce using rule 25 (unary_operator -> TILD .)
    CONSTANT        reduce using rule 25 (unary_operator -> TILD .)
    STRING_LITERAL  reduce using rule 25 (unary_operator -> TILD .)


state 99

    (33) additive_expression -> multiplicative_expression .
    (30) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (31) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (32) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 33 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 33 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 33 (additive_expression -> multiplicative_expression .)
    INF             reduce using rule 33 (additive_expression -> multiplicative_expression .)
    SUP             reduce using rule 33 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 33 (additive_expression -> multiplicative_expression .)
    EXOR            reduce using rule 33 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 33 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 33 (additive_expression -> multiplicative_expression .)
    INTER           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 33 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    R_BRACKET       reduce using rule 33 (additive_expression -> multiplicative_expression .)
    R_BRACE         reduce using rule 33 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 33 (additive_expression -> multiplicative_expression .)
    R_HOOK          reduce using rule 33 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 191
    DIVIDE          shift and go to state 190
    MOD             shift and go to state 192


state 100

    (179) labeled_statement -> IDENTIFIER . COLON statement
    (1) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 193
    L_BRACE         reduce using rule 1 (primary_expression -> IDENTIFIER .)
    L_BRACKET       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    POINT           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INF             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SUP             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EXOR            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INTER           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 1 (primary_expression -> IDENTIFIER .)


state 101

    (182) compound_statement -> L_BRACE R_BRACE .

    TYPEDEF         reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    EXTERN          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    STATIC          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    AUTO            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    REGISTER        reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    VOID            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    CHAR            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    SHORT           reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    INT             reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    LONG            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    BOOL            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    FLOAT           reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    DOUBLE          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    SIGNED          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    UNSIGNED        reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    CONST           reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    VOLATILE        reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    TIMES           reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    IDENTIFIER      reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    L_BRACKET       reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    ENUM            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    STRUCT          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    UNION           reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    $end            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    R_BRACE         reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    CASE            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    DEFAULT         reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    L_BRACE         reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    SEMICOLON       reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    IF              reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    SWITCH          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    WHILE           reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    DO              reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    FOR             reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    GOTO            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    CONTINUE        reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    BREAK           reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    RETURN          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    INC_OP          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    DEC_OP          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    SIZEOF          reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    AND             reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    PLUS            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    MINUS           reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    TILD            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    NOT             reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    CONSTANT        reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    STRING_LITERAL  reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)
    ELSE            reduce using rule 182 (compound_statement -> L_BRACE R_BRACE .)


state 102

    (177) statement -> iteration_statement .

    R_BRACE         reduce using rule 177 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 177 (statement -> iteration_statement .)
    CASE            reduce using rule 177 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 177 (statement -> iteration_statement .)
    L_BRACE         reduce using rule 177 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 177 (statement -> iteration_statement .)
    IF              reduce using rule 177 (statement -> iteration_statement .)
    SWITCH          reduce using rule 177 (statement -> iteration_statement .)
    WHILE           reduce using rule 177 (statement -> iteration_statement .)
    DO              reduce using rule 177 (statement -> iteration_statement .)
    FOR             reduce using rule 177 (statement -> iteration_statement .)
    GOTO            reduce using rule 177 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 177 (statement -> iteration_statement .)
    BREAK           reduce using rule 177 (statement -> iteration_statement .)
    RETURN          reduce using rule 177 (statement -> iteration_statement .)
    INC_OP          reduce using rule 177 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 177 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 177 (statement -> iteration_statement .)
    AND             reduce using rule 177 (statement -> iteration_statement .)
    TIMES           reduce using rule 177 (statement -> iteration_statement .)
    PLUS            reduce using rule 177 (statement -> iteration_statement .)
    MINUS           reduce using rule 177 (statement -> iteration_statement .)
    TILD            reduce using rule 177 (statement -> iteration_statement .)
    NOT             reduce using rule 177 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 177 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 177 (statement -> iteration_statement .)
    L_BRACKET       reduce using rule 177 (statement -> iteration_statement .)
    ELSE            reduce using rule 177 (statement -> iteration_statement .)


state 103

    (2) primary_expression -> CONSTANT .

    L_BRACE         reduce using rule 2 (primary_expression -> CONSTANT .)
    L_BRACKET       reduce using rule 2 (primary_expression -> CONSTANT .)
    POINT           reduce using rule 2 (primary_expression -> CONSTANT .)
    PTR_OP          reduce using rule 2 (primary_expression -> CONSTANT .)
    INC_OP          reduce using rule 2 (primary_expression -> CONSTANT .)
    DEC_OP          reduce using rule 2 (primary_expression -> CONSTANT .)
    EQUALS          reduce using rule 2 (primary_expression -> CONSTANT .)
    MUL_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANT .)
    DIV_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANT .)
    MOD_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANT .)
    ADD_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANT .)
    SUB_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANT .)
    LEFT_ASSIGN     reduce using rule 2 (primary_expression -> CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 2 (primary_expression -> CONSTANT .)
    AND_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANT .)
    XOR_ASSIGN      reduce using rule 2 (primary_expression -> CONSTANT .)
    OR_ASSIGN       reduce using rule 2 (primary_expression -> CONSTANT .)
    TIMES           reduce using rule 2 (primary_expression -> CONSTANT .)
    DIVIDE          reduce using rule 2 (primary_expression -> CONSTANT .)
    MOD             reduce using rule 2 (primary_expression -> CONSTANT .)
    PLUS            reduce using rule 2 (primary_expression -> CONSTANT .)
    MINUS           reduce using rule 2 (primary_expression -> CONSTANT .)
    LEFT_OP         reduce using rule 2 (primary_expression -> CONSTANT .)
    RIGHT_OP        reduce using rule 2 (primary_expression -> CONSTANT .)
    INF             reduce using rule 2 (primary_expression -> CONSTANT .)
    SUP             reduce using rule 2 (primary_expression -> CONSTANT .)
    LE_OP           reduce using rule 2 (primary_expression -> CONSTANT .)
    GE_OP           reduce using rule 2 (primary_expression -> CONSTANT .)
    EQ_OP           reduce using rule 2 (primary_expression -> CONSTANT .)
    NE_OP           reduce using rule 2 (primary_expression -> CONSTANT .)
    AND             reduce using rule 2 (primary_expression -> CONSTANT .)
    EXOR            reduce using rule 2 (primary_expression -> CONSTANT .)
    OR              reduce using rule 2 (primary_expression -> CONSTANT .)
    AND_OP          reduce using rule 2 (primary_expression -> CONSTANT .)
    INTER           reduce using rule 2 (primary_expression -> CONSTANT .)
    OR_OP           reduce using rule 2 (primary_expression -> CONSTANT .)
    SEMICOLON       reduce using rule 2 (primary_expression -> CONSTANT .)
    COMMA           reduce using rule 2 (primary_expression -> CONSTANT .)
    R_HOOK          reduce using rule 2 (primary_expression -> CONSTANT .)
    R_BRACKET       reduce using rule 2 (primary_expression -> CONSTANT .)
    COLON           reduce using rule 2 (primary_expression -> CONSTANT .)
    R_BRACE         reduce using rule 2 (primary_expression -> CONSTANT .)


state 104

    (72) expression -> assignment_expression .

    SEMICOLON       reduce using rule 72 (expression -> assignment_expression .)
    COMMA           reduce using rule 72 (expression -> assignment_expression .)
    R_BRACE         reduce using rule 72 (expression -> assignment_expression .)
    R_BRACKET       reduce using rule 72 (expression -> assignment_expression .)
    COLON           reduce using rule 72 (expression -> assignment_expression .)


state 105

    (18) unary_expression -> unary_operator . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 83
    unary_operator                 shift and go to state 105
    primary_expression             shift and go to state 72
    cast_expression                shift and go to state 194

state 106

    (53) logical_and_expression -> inclusive_or_expression .
    (52) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AND_OP          reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    INTER           reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    SEMICOLON       reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    R_BRACKET       reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    R_BRACE         reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    R_HOOK          reduce using rule 53 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 195


state 107

    (16) unary_expression -> INC_OP . unary_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 155

    unary_expression               shift and go to state 196
    postfix_expression             shift and go to state 83
    unary_operator                 shift and go to state 105
    primary_expression             shift and go to state 72

state 108

    (4) primary_expression -> L_BRACKET . expression R_BRACKET
    (28) cast_expression -> L_BRACKET . type_name R_BRACKET cast_expression
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (154) type_name -> . specifier_qualifier_list
    (155) type_name -> . specifier_qualifier_list abstract_declarator
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (112) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (113) specifier_qualifier_list -> . type_specifier
    (114) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_qualifier
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    ENUM            shift and go to state 36
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    primary_expression             shift and go to state 72
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    struct_or_union_specifier      shift and go to state 17
    shift_expression               shift and go to state 115
    inclusive_or_expression        shift and go to state 106
    type_qualifier                 shift and go to state 139
    struct_or_union                shift and go to state 34
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    type_specifier                 shift and go to state 141
    cast_expression                shift and go to state 90
    type_name                      shift and go to state 197
    unary_expression               shift and go to state 92
    enum_specifier                 shift and go to state 27
    and_expression                 shift and go to state 97
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    specifier_qualifier_list       shift and go to state 198
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    expression                     shift and go to state 199
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109

state 109

    (51) inclusive_or_expression -> exclusive_or_expression .
    (50) exclusive_or_expression -> exclusive_or_expression . EXOR and_expression

    OR              reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    INTER           reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    SEMICOLON       reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    R_BRACKET       reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    R_BRACE         reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    R_HOOK          reduce using rule 51 (inclusive_or_expression -> exclusive_or_expression .)
    EXOR            shift and go to state 200


state 110

    (178) statement -> jump_statement .

    R_BRACE         reduce using rule 178 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 178 (statement -> jump_statement .)
    CASE            reduce using rule 178 (statement -> jump_statement .)
    DEFAULT         reduce using rule 178 (statement -> jump_statement .)
    L_BRACE         reduce using rule 178 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 178 (statement -> jump_statement .)
    IF              reduce using rule 178 (statement -> jump_statement .)
    SWITCH          reduce using rule 178 (statement -> jump_statement .)
    WHILE           reduce using rule 178 (statement -> jump_statement .)
    DO              reduce using rule 178 (statement -> jump_statement .)
    FOR             reduce using rule 178 (statement -> jump_statement .)
    GOTO            reduce using rule 178 (statement -> jump_statement .)
    CONTINUE        reduce using rule 178 (statement -> jump_statement .)
    BREAK           reduce using rule 178 (statement -> jump_statement .)
    RETURN          reduce using rule 178 (statement -> jump_statement .)
    INC_OP          reduce using rule 178 (statement -> jump_statement .)
    DEC_OP          reduce using rule 178 (statement -> jump_statement .)
    SIZEOF          reduce using rule 178 (statement -> jump_statement .)
    AND             reduce using rule 178 (statement -> jump_statement .)
    TIMES           reduce using rule 178 (statement -> jump_statement .)
    PLUS            reduce using rule 178 (statement -> jump_statement .)
    MINUS           reduce using rule 178 (statement -> jump_statement .)
    TILD            reduce using rule 178 (statement -> jump_statement .)
    NOT             reduce using rule 178 (statement -> jump_statement .)
    CONSTANT        reduce using rule 178 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 178 (statement -> jump_statement .)
    L_BRACKET       reduce using rule 178 (statement -> jump_statement .)
    ELSE            reduce using rule 178 (statement -> jump_statement .)


state 111

    (199) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 201


state 112

    (200) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 202


state 113

    (3) primary_expression -> STRING_LITERAL .

    L_BRACE         reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    L_BRACKET       reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    POINT           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    PTR_OP          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    INC_OP          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    DEC_OP          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    EQUALS          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    TIMES           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    MOD             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    PLUS            reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    MINUS           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    INF             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    SUP             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    LE_OP           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    GE_OP           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    EQ_OP           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    NE_OP           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    EXOR            reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    AND_OP          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    INTER           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    OR_OP           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    COMMA           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    R_HOOK          reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    R_BRACKET       reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    COLON           reduce using rule 3 (primary_expression -> STRING_LITERAL .)
    R_BRACE         reduce using rule 3 (primary_expression -> STRING_LITERAL .)


state 114

    (192) selection_statement -> IF . L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> IF . L_BRACKET expression R_BRACKET statement ELSE statement

    L_BRACKET       shift and go to state 203


state 115

    (39) relational_expression -> shift_expression .
    (37) shift_expression -> shift_expression . LEFT_OP additive_expression
    (38) shift_expression -> shift_expression . RIGHT_OP additive_expression

    INF             reduce using rule 39 (relational_expression -> shift_expression .)
    SUP             reduce using rule 39 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 39 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 39 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 39 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 39 (relational_expression -> shift_expression .)
    AND             reduce using rule 39 (relational_expression -> shift_expression .)
    EXOR            reduce using rule 39 (relational_expression -> shift_expression .)
    OR              reduce using rule 39 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 39 (relational_expression -> shift_expression .)
    INTER           reduce using rule 39 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 39 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 39 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 39 (relational_expression -> shift_expression .)
    R_BRACKET       reduce using rule 39 (relational_expression -> shift_expression .)
    R_BRACE         reduce using rule 39 (relational_expression -> shift_expression .)
    COLON           reduce using rule 39 (relational_expression -> shift_expression .)
    R_HOOK          reduce using rule 39 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 205
    RIGHT_OP        shift and go to state 204


state 116

    (201) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 206


state 117

    (47) and_expression -> equality_expression .
    (45) equality_expression -> equality_expression . EQ_OP relational_expression
    (46) equality_expression -> equality_expression . NE_OP relational_expression

    AND             reduce using rule 47 (and_expression -> equality_expression .)
    EXOR            reduce using rule 47 (and_expression -> equality_expression .)
    OR              reduce using rule 47 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 47 (and_expression -> equality_expression .)
    INTER           reduce using rule 47 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 47 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 47 (and_expression -> equality_expression .)
    COMMA           reduce using rule 47 (and_expression -> equality_expression .)
    R_BRACE         reduce using rule 47 (and_expression -> equality_expression .)
    R_BRACKET       reduce using rule 47 (and_expression -> equality_expression .)
    COLON           reduce using rule 47 (and_expression -> equality_expression .)
    R_HOOK          reduce using rule 47 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 208
    NE_OP           shift and go to state 207


state 118

    (184) compound_statement -> L_BRACE declaration_list . R_BRACE
    (185) compound_statement -> L_BRACE declaration_list . statement_list R_BRACE
    (187) declaration_list -> declaration_list . declaration
    (188) statement_list -> . statement
    (189) statement_list -> . statement_list statement
    (75) declaration -> . declaration_specifiers SEMICOLON
    (76) declaration -> . declaration_specifiers init_declarator_list SEMICOLON
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    R_BRACE         shift and go to state 210
    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    struct_or_union_specifier      shift and go to state 17
    enum_specifier                 shift and go to state 27
    declaration_specifiers         shift and go to state 45
    primary_expression             shift and go to state 72
    type_qualifier                 shift and go to state 20
    statement_list                 shift and go to state 209
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    declaration                    shift and go to state 70
    equality_expression            shift and go to state 117
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    type_specifier                 shift and go to state 24
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    logical_and_expression         shift and go to state 94
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    relational_expression          shift and go to state 119
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 93
    exclusive_or_expression        shift and go to state 109
    expression                     shift and go to state 84
    jump_statement                 shift and go to state 110

state 119

    (44) equality_expression -> relational_expression .
    (40) relational_expression -> relational_expression . INF shift_expression
    (41) relational_expression -> relational_expression . SUP shift_expression
    (42) relational_expression -> relational_expression . LE_OP shift_expression
    (43) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 44 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 44 (equality_expression -> relational_expression .)
    AND             reduce using rule 44 (equality_expression -> relational_expression .)
    EXOR            reduce using rule 44 (equality_expression -> relational_expression .)
    OR              reduce using rule 44 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 44 (equality_expression -> relational_expression .)
    INTER           reduce using rule 44 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 44 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 44 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 44 (equality_expression -> relational_expression .)
    R_HOOK          reduce using rule 44 (equality_expression -> relational_expression .)
    R_BRACKET       reduce using rule 44 (equality_expression -> relational_expression .)
    COLON           reduce using rule 44 (equality_expression -> relational_expression .)
    R_BRACE         reduce using rule 44 (equality_expression -> relational_expression .)
    INF             shift and go to state 213
    SUP             shift and go to state 214
    LE_OP           shift and go to state 212
    GE_OP           shift and go to state 211


state 120

    (180) labeled_statement -> CASE . constant_expression COLON statement
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    inclusive_or_expression        shift and go to state 106
    unary_operator                 shift and go to state 105
    conditional_expression         shift and go to state 126
    additive_expression            shift and go to state 95
    and_expression                 shift and go to state 97
    constant_expression            shift and go to state 215
    equality_expression            shift and go to state 117
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109

state 121

    (26) unary_operator -> NOT .

    L_BRACKET       reduce using rule 26 (unary_operator -> NOT .)
    INC_OP          reduce using rule 26 (unary_operator -> NOT .)
    DEC_OP          reduce using rule 26 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 26 (unary_operator -> NOT .)
    AND             reduce using rule 26 (unary_operator -> NOT .)
    TIMES           reduce using rule 26 (unary_operator -> NOT .)
    PLUS            reduce using rule 26 (unary_operator -> NOT .)
    MINUS           reduce using rule 26 (unary_operator -> NOT .)
    TILD            reduce using rule 26 (unary_operator -> NOT .)
    NOT             reduce using rule 26 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 26 (unary_operator -> NOT .)
    CONSTANT        reduce using rule 26 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 26 (unary_operator -> NOT .)


state 122

    (19) unary_expression -> SIZEOF . unary_expression
    (20) unary_expression -> SIZEOF . L_BRACKET type_name R_BRACKET
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 216
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 217
    postfix_expression             shift and go to state 83
    unary_operator                 shift and go to state 105
    primary_expression             shift and go to state 72

state 123

    (24) unary_operator -> MINUS .

    L_BRACKET       reduce using rule 24 (unary_operator -> MINUS .)
    INC_OP          reduce using rule 24 (unary_operator -> MINUS .)
    DEC_OP          reduce using rule 24 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 24 (unary_operator -> MINUS .)
    AND             reduce using rule 24 (unary_operator -> MINUS .)
    TIMES           reduce using rule 24 (unary_operator -> MINUS .)
    PLUS            reduce using rule 24 (unary_operator -> MINUS .)
    MINUS           reduce using rule 24 (unary_operator -> MINUS .)
    TILD            reduce using rule 24 (unary_operator -> MINUS .)
    NOT             reduce using rule 24 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 24 (unary_operator -> MINUS .)
    CONSTANT        reduce using rule 24 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 24 (unary_operator -> MINUS .)


state 124

    (181) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 218


state 125

    (133) direct_declarator -> L_BRACKET declarator R_BRACKET .

    L_HOOK          reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    L_BRACKET       reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    COLON           reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    SEMICOLON       reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    COMMA           reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    R_BRACKET       reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    EQUALS          reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    L_BRACE         reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    TYPEDEF         reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    EXTERN          reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    STATIC          reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    AUTO            reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    REGISTER        reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    VOID            reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    CHAR            reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    SHORT           reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    INT             reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    LONG            reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    BOOL            reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    FLOAT           reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    DOUBLE          reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    SIGNED          reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    UNSIGNED        reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    CONST           reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    VOLATILE        reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    ENUM            reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    STRUCT          reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)
    UNION           reduce using rule 133 (direct_declarator -> L_BRACKET declarator R_BRACKET .)


state 126

    (74) constant_expression -> conditional_expression .

    SEMICOLON       reduce using rule 74 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 74 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 74 (constant_expression -> conditional_expression .)
    R_HOOK          reduce using rule 74 (constant_expression -> conditional_expression .)
    R_BRACE         reduce using rule 74 (constant_expression -> conditional_expression .)


state 127

    (1) primary_expression -> IDENTIFIER .

    L_BRACE         reduce using rule 1 (primary_expression -> IDENTIFIER .)
    L_BRACKET       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    POINT           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MOD             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 1 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INF             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SUP             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 1 (primary_expression -> IDENTIFIER .)
    EXOR            reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 1 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    INTER           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    R_HOOK          reduce using rule 1 (primary_expression -> IDENTIFIER .)
    R_BRACKET       reduce using rule 1 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 1 (primary_expression -> IDENTIFIER .)
    R_BRACE         reduce using rule 1 (primary_expression -> IDENTIFIER .)


state 128

    (28) cast_expression -> L_BRACKET . type_name R_BRACKET cast_expression
    (4) primary_expression -> L_BRACKET . expression R_BRACKET
    (154) type_name -> . specifier_qualifier_list
    (155) type_name -> . specifier_qualifier_list abstract_declarator
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (112) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (113) specifier_qualifier_list -> . type_specifier
    (114) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_qualifier
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    ENUM            shift and go to state 36
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    struct_or_union_specifier      shift and go to state 17
    shift_expression               shift and go to state 115
    inclusive_or_expression        shift and go to state 106
    type_qualifier                 shift and go to state 139
    struct_or_union                shift and go to state 34
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    type_specifier                 shift and go to state 141
    cast_expression                shift and go to state 90
    type_name                      shift and go to state 197
    unary_expression               shift and go to state 92
    enum_specifier                 shift and go to state 27
    logical_and_expression         shift and go to state 94
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    specifier_qualifier_list       shift and go to state 198
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    expression                     shift and go to state 199
    exclusive_or_expression        shift and go to state 109

state 129

    (135) direct_declarator -> direct_declarator L_HOOK R_HOOK .

    L_HOOK          reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    L_BRACKET       reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    COLON           reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    SEMICOLON       reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    COMMA           reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    R_BRACKET       reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    EQUALS          reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    L_BRACE         reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    TYPEDEF         reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    EXTERN          reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    STATIC          reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    AUTO            reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    REGISTER        reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    VOID            reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    CHAR            reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    SHORT           reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    INT             reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    LONG            reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    BOOL            reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    FLOAT           reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    DOUBLE          reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    SIGNED          reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    UNSIGNED        reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    CONST           reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    VOLATILE        reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    ENUM            reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    STRUCT          reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)
    UNION           reduce using rule 135 (direct_declarator -> direct_declarator L_HOOK R_HOOK .)


state 130

    (134) direct_declarator -> direct_declarator L_HOOK constant_expression . R_HOOK

    R_HOOK          shift and go to state 219


state 131

    (27) cast_expression -> unary_expression .

    TIMES           reduce using rule 27 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 27 (cast_expression -> unary_expression .)
    MOD             reduce using rule 27 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 27 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 27 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 27 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 27 (cast_expression -> unary_expression .)
    INF             reduce using rule 27 (cast_expression -> unary_expression .)
    SUP             reduce using rule 27 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    AND             reduce using rule 27 (cast_expression -> unary_expression .)
    EXOR            reduce using rule 27 (cast_expression -> unary_expression .)
    OR              reduce using rule 27 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 27 (cast_expression -> unary_expression .)
    INTER           reduce using rule 27 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 27 (cast_expression -> unary_expression .)
    R_BRACE         reduce using rule 27 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 27 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 27 (cast_expression -> unary_expression .)
    R_HOOK          reduce using rule 27 (cast_expression -> unary_expression .)
    R_BRACKET       reduce using rule 27 (cast_expression -> unary_expression .)
    COLON           reduce using rule 27 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 27 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 27 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 27 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 27 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 27 (cast_expression -> unary_expression .)


state 132

    (137) direct_declarator -> direct_declarator L_BRACKET identifier_list . R_BRACKET
    (153) identifier_list -> identifier_list . COMMA IDENTIFIER

    R_BRACKET       shift and go to state 221
    COMMA           shift and go to state 220


state 133

    (149) parameter_declaration -> declaration_specifiers . declarator
    (150) parameter_declaration -> declaration_specifiers . abstract_declarator
    (151) parameter_declaration -> declaration_specifiers .
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (156) abstract_declarator -> . pointer
    (157) abstract_declarator -> . direct_abstract_declarator
    (158) abstract_declarator -> . pointer direct_abstract_declarator
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET
    (159) direct_abstract_declarator -> . L_BRACKET abstract_declarator R_BRACKET
    (160) direct_abstract_declarator -> . L_HOOK R_HOOK
    (161) direct_abstract_declarator -> . L_HOOK constant_expression R_HOOK
    (162) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK R_HOOK
    (163) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK constant_expression R_HOOK
    (164) direct_abstract_declarator -> . L_BRACKET R_BRACKET
    (165) direct_abstract_declarator -> . L_BRACKET parameter_type_list R_BRACKET
    (166) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET R_BRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET

    COMMA           reduce using rule 151 (parameter_declaration -> declaration_specifiers .)
    R_BRACKET       reduce using rule 151 (parameter_declaration -> declaration_specifiers .)
    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 223
    L_HOOK          shift and go to state 224

    direct_declarator              shift and go to state 29
    pointer                        shift and go to state 225
    direct_abstract_declarator     shift and go to state 227
    abstract_declarator            shift and go to state 222
    declarator                     shift and go to state 226

state 134

    (145) parameter_type_list -> parameter_list .
    (146) parameter_type_list -> parameter_list . COMMA ELLIPSIS
    (148) parameter_list -> parameter_list . COMMA parameter_declaration

    R_BRACKET       reduce using rule 145 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 228


state 135

    (147) parameter_list -> parameter_declaration .

    COMMA           reduce using rule 147 (parameter_list -> parameter_declaration .)
    R_BRACKET       reduce using rule 147 (parameter_list -> parameter_declaration .)


state 136

    (152) identifier_list -> IDENTIFIER .

    R_BRACKET       reduce using rule 152 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 152 (identifier_list -> IDENTIFIER .)


state 137

    (136) direct_declarator -> direct_declarator L_BRACKET parameter_type_list . R_BRACKET

    R_BRACKET       shift and go to state 229


state 138

    (138) direct_declarator -> direct_declarator L_BRACKET R_BRACKET .

    L_HOOK          reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    L_BRACKET       reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    COLON           reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    SEMICOLON       reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    COMMA           reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    R_BRACKET       reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    EQUALS          reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    L_BRACE         reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    TYPEDEF         reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    EXTERN          reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    STATIC          reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    AUTO            reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    REGISTER        reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    VOID            reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    CHAR            reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    SHORT           reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    INT             reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    LONG            reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    BOOL            reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    FLOAT           reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    DOUBLE          reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    SIGNED          reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    UNSIGNED        reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    CONST           reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    VOLATILE        reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    ENUM            reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    STRUCT          reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)
    UNION           reduce using rule 138 (direct_declarator -> direct_declarator L_BRACKET R_BRACKET .)


state 139

    (114) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (115) specifier_qualifier_list -> type_qualifier .
    (112) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (113) specifier_qualifier_list -> . type_specifier
    (114) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    COLON           reduce using rule 115 (specifier_qualifier_list -> type_qualifier .)
    TIMES           reduce using rule 115 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 115 (specifier_qualifier_list -> type_qualifier .)
    L_BRACKET       reduce using rule 115 (specifier_qualifier_list -> type_qualifier .)
    L_HOOK          reduce using rule 115 (specifier_qualifier_list -> type_qualifier .)
    R_BRACKET       reduce using rule 115 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    type_qualifier                 shift and go to state 139
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34
    struct_or_union_specifier      shift and go to state 17
    type_specifier                 shift and go to state 141
    specifier_qualifier_list       shift and go to state 230

state 140

    (111) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMICOLON
    (116) struct_declarator_list -> . struct_declarator
    (117) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (118) struct_declarator -> . declarator
    (119) struct_declarator -> . COLON constant_expression
    (120) struct_declarator -> . declarator COLON constant_expression
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET

    COLON           shift and go to state 232
    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 14

    struct_declarator              shift and go to state 231
    direct_declarator              shift and go to state 29
    pointer                        shift and go to state 23
    struct_declarator_list         shift and go to state 234
    declarator                     shift and go to state 233

state 141

    (112) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (113) specifier_qualifier_list -> type_specifier .
    (112) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (113) specifier_qualifier_list -> . type_specifier
    (114) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    COLON           reduce using rule 113 (specifier_qualifier_list -> type_specifier .)
    TIMES           reduce using rule 113 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 113 (specifier_qualifier_list -> type_specifier .)
    L_BRACKET       reduce using rule 113 (specifier_qualifier_list -> type_specifier .)
    L_HOOK          reduce using rule 113 (specifier_qualifier_list -> type_specifier .)
    R_BRACKET       reduce using rule 113 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    type_qualifier                 shift and go to state 139
    enum_specifier                 shift and go to state 27
    struct_or_union                shift and go to state 34
    struct_or_union_specifier      shift and go to state 17
    type_specifier                 shift and go to state 141
    specifier_qualifier_list       shift and go to state 235

state 142

    (109) struct_declaration_list -> struct_declaration .

    R_BRACE         reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 109 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 109 (struct_declaration_list -> struct_declaration .)


state 143

    (105) struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list . R_BRACE
    (110) struct_declaration_list -> struct_declaration_list . struct_declaration
    (111) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (112) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (113) specifier_qualifier_list -> . type_specifier
    (114) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    R_BRACE         shift and go to state 236
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    type_qualifier                 shift and go to state 139
    type_specifier                 shift and go to state 141
    struct_or_union                shift and go to state 34
    enum_specifier                 shift and go to state 27
    struct_declaration             shift and go to state 237
    struct_or_union_specifier      shift and go to state 17
    specifier_qualifier_list       shift and go to state 140

state 144

    (104) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE . struct_declaration_list R_BRACE
    (109) struct_declaration_list -> . struct_declaration
    (110) struct_declaration_list -> . struct_declaration_list struct_declaration
    (111) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (112) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (113) specifier_qualifier_list -> . type_specifier
    (114) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    type_qualifier                 shift and go to state 139
    type_specifier                 shift and go to state 141
    struct_or_union                shift and go to state 34
    enum_specifier                 shift and go to state 27
    struct_declaration             shift and go to state 142
    struct_declaration_list        shift and go to state 238
    struct_or_union_specifier      shift and go to state 17
    specifier_qualifier_list       shift and go to state 140

state 145

    (122) enum_specifier -> ENUM IDENTIFIER L_BRACE . enumerator_list R_BRACE
    (124) enumerator_list -> . enumerator
    (125) enumerator_list -> . enumerator_list COMMA enumerator
    (126) enumerator -> . IDENTIFIER
    (127) enumerator -> . IDENTIFIER EQUALS constant_expression

    IDENTIFIER      shift and go to state 146

    enumerator_list                shift and go to state 239
    enumerator                     shift and go to state 148

state 146

    (126) enumerator -> IDENTIFIER .
    (127) enumerator -> IDENTIFIER . EQUALS constant_expression

    R_BRACE         reduce using rule 126 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 126 (enumerator -> IDENTIFIER .)
    EQUALS          shift and go to state 240


state 147

    (121) enum_specifier -> ENUM L_BRACE enumerator_list . R_BRACE
    (125) enumerator_list -> enumerator_list . COMMA enumerator

    R_BRACE         shift and go to state 241
    COMMA           shift and go to state 242


state 148

    (124) enumerator_list -> enumerator .

    R_BRACE         reduce using rule 124 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 124 (enumerator_list -> enumerator .)


state 149

    (84) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMICOLON       reduce using rule 84 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 84 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 150

    (169) initializer -> L_BRACE . initializer_list R_BRACE
    (170) initializer -> L_BRACE . initializer_list COMMA R_BRACE
    (171) initializer_list -> . initializer
    (172) initializer_list -> . initializer_list COMMA initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . L_BRACE initializer_list R_BRACE
    (170) initializer -> . L_BRACE initializer_list COMMA R_BRACE
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    L_BRACE         shift and go to state 150
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    initializer                    shift and go to state 244
    shift_expression               shift and go to state 115
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 151
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94
    initializer_list               shift and go to state 243

state 151

    (168) initializer -> assignment_expression .

    R_BRACE         reduce using rule 168 (initializer -> assignment_expression .)
    COMMA           reduce using rule 168 (initializer -> assignment_expression .)
    SEMICOLON       reduce using rule 168 (initializer -> assignment_expression .)


state 152

    (86) init_declarator -> declarator EQUALS initializer .

    SEMICOLON       reduce using rule 86 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 86 (init_declarator -> declarator EQUALS initializer .)


state 153

    (208) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TIMES           reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    L_BRACKET       reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 154

    (196) iteration_statement -> DO statement . WHILE L_BRACKET expression R_BRACKET SEMICOLON

    WHILE           shift and go to state 245


state 155

    (4) primary_expression -> L_BRACKET . expression R_BRACKET
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    unary_expression               shift and go to state 92
    primary_expression             shift and go to state 72
    assignment_expression          shift and go to state 104
    conditional_expression         shift and go to state 73
    unary_operator                 shift and go to state 105
    and_expression                 shift and go to state 97
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    additive_expression            shift and go to state 95
    equality_expression            shift and go to state 117
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    expression                     shift and go to state 199
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    exclusive_or_expression        shift and go to state 109
    cast_expression                shift and go to state 90

state 156

    (17) unary_expression -> DEC_OP unary_expression .

    TIMES           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    DIVIDE          reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    MOD             reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    PLUS            reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    MINUS           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    INF             reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    SUP             reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    AND             reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    EXOR            reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    OR              reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    INTER           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    R_HOOK          reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    SEMICOLON       reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    COMMA           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    EQUALS          reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    R_BRACKET       reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    COLON           reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)
    R_BRACE         reduce using rule 17 (unary_expression -> DEC_OP unary_expression .)


state 157

    (195) iteration_statement -> WHILE L_BRACKET . expression R_BRACKET statement
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    expression                     shift and go to state 246
    logical_and_expression         shift and go to state 94

state 158

    (58) conditional_expression -> logical_or_expression INTER . expression COLON conditional_expression
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    unary_expression               shift and go to state 92
    primary_expression             shift and go to state 72
    assignment_expression          shift and go to state 104
    conditional_expression         shift and go to state 73
    unary_operator                 shift and go to state 105
    and_expression                 shift and go to state 97
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    additive_expression            shift and go to state 95
    equality_expression            shift and go to state 117
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    expression                     shift and go to state 247
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    exclusive_or_expression        shift and go to state 109
    cast_expression                shift and go to state 90

state 159

    (56) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    equality_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 106
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 131
    and_expression                 shift and go to state 97
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    logical_and_expression         shift and go to state 248
    cast_expression                shift and go to state 90
    exclusive_or_expression        shift and go to state 109

state 160

    (197) iteration_statement -> FOR L_BRACKET . expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> FOR L_BRACKET . expression_statement expression_statement expression R_BRACKET statement
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    SEMICOLON       shift and go to state 89
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 249
    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94

state 161

    (7) postfix_expression -> postfix_expression L_BRACKET . R_BRACKET
    (8) postfix_expression -> postfix_expression L_BRACKET . argument_expression_list R_BRACKET
    (13) argument_expression_list -> . assignment_expression
    (14) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    R_BRACKET       shift and go to state 250
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    unary_expression               shift and go to state 92
    primary_expression             shift and go to state 72
    logical_and_expression         shift and go to state 94
    assignment_expression          shift and go to state 251
    conditional_expression         shift and go to state 73
    unary_operator                 shift and go to state 105
    and_expression                 shift and go to state 97
    argument_expression_list       shift and go to state 252
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    additive_expression            shift and go to state 95
    equality_expression            shift and go to state 117
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    exclusive_or_expression        shift and go to state 109
    cast_expression                shift and go to state 90

state 162

    (9) postfix_expression -> postfix_expression POINT . IDENTIFIER

    IDENTIFIER      shift and go to state 253


state 163

    (12) postfix_expression -> postfix_expression DEC_OP .

    L_BRACE         reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    L_BRACKET       reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    POINT           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    EQUALS          reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    TIMES           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    DIVIDE          reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    MOD             reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    PLUS            reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    MINUS           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    INF             reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    SUP             reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    AND             reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    EXOR            reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    OR              reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    INTER           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    SEMICOLON       reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    COMMA           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    R_BRACKET       reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    R_HOOK          reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    COLON           reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)
    R_BRACE         reduce using rule 12 (postfix_expression -> postfix_expression DEC_OP .)


state 164

    (11) postfix_expression -> postfix_expression INC_OP .

    L_BRACE         reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    L_BRACKET       reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    POINT           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    EQUALS          reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    TIMES           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    DIVIDE          reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    MOD             reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    PLUS            reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    MINUS           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    INF             reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    SUP             reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    AND             reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    EXOR            reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    OR              reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    INTER           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    SEMICOLON       reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    COMMA           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    R_BRACKET       reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    R_HOOK          reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    COLON           reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)
    R_BRACE         reduce using rule 11 (postfix_expression -> postfix_expression INC_OP .)


state 165

    (6) postfix_expression -> postfix_expression L_BRACE . expression R_BRACE
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    unary_expression               shift and go to state 92
    primary_expression             shift and go to state 72
    assignment_expression          shift and go to state 104
    conditional_expression         shift and go to state 73
    unary_operator                 shift and go to state 105
    and_expression                 shift and go to state 97
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    additive_expression            shift and go to state 95
    equality_expression            shift and go to state 117
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    expression                     shift and go to state 254
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    exclusive_or_expression        shift and go to state 109
    cast_expression                shift and go to state 90

state 166

    (10) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 255


state 167

    (191) expression_statement -> expression SEMICOLON .

    R_BRACE         reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    CASE            reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    DEFAULT         reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    L_BRACE         reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    SWITCH          reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    DO              reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    INC_OP          reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    DEC_OP          reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    AND             reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    TIMES           reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    TILD            reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    CONSTANT        reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    L_BRACKET       reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 191 (expression_statement -> expression SEMICOLON .)
    R_BRACKET       reduce using rule 191 (expression_statement -> expression SEMICOLON .)


state 168

    (73) expression -> expression COMMA . assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    unary_expression               shift and go to state 92
    primary_expression             shift and go to state 72
    assignment_expression          shift and go to state 256
    conditional_expression         shift and go to state 73
    unary_operator                 shift and go to state 105
    and_expression                 shift and go to state 97
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    additive_expression            shift and go to state 95
    equality_expression            shift and go to state 117
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    exclusive_or_expression        shift and go to state 109
    cast_expression                shift and go to state 90

state 169

    (194) selection_statement -> SWITCH L_BRACKET . expression R_BRACKET statement
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    expression                     shift and go to state 257
    logical_and_expression         shift and go to state 94

state 170

    (183) compound_statement -> L_BRACE statement_list R_BRACE .

    TYPEDEF         reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    EXTERN          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    STATIC          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    AUTO            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    REGISTER        reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    VOID            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CHAR            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SHORT           reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    INT             reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    LONG            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    BOOL            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    FLOAT           reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    DOUBLE          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SIGNED          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    UNSIGNED        reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CONST           reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    VOLATILE        reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    TIMES           reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    IDENTIFIER      reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    L_BRACKET       reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    ENUM            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    STRUCT          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    UNION           reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    $end            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    R_BRACE         reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CASE            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    DEFAULT         reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    L_BRACE         reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SEMICOLON       reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    IF              reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SWITCH          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    WHILE           reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    DO              reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    FOR             reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    GOTO            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CONTINUE        reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    BREAK           reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    RETURN          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    INC_OP          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    DEC_OP          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    SIZEOF          reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    AND             reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    PLUS            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    MINUS           reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    TILD            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    NOT             reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    CONSTANT        reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    STRING_LITERAL  reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)
    ELSE            reduce using rule 183 (compound_statement -> L_BRACE statement_list R_BRACE .)


state 171

    (189) statement_list -> statement_list statement .

    R_BRACE         reduce using rule 189 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 189 (statement_list -> statement_list statement .)
    CASE            reduce using rule 189 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 189 (statement_list -> statement_list statement .)
    L_BRACE         reduce using rule 189 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 189 (statement_list -> statement_list statement .)
    IF              reduce using rule 189 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 189 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 189 (statement_list -> statement_list statement .)
    DO              reduce using rule 189 (statement_list -> statement_list statement .)
    FOR             reduce using rule 189 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 189 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 189 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 189 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 189 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 189 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 189 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 189 (statement_list -> statement_list statement .)
    AND             reduce using rule 189 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 189 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 189 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 189 (statement_list -> statement_list statement .)
    TILD            reduce using rule 189 (statement_list -> statement_list statement .)
    NOT             reduce using rule 189 (statement_list -> statement_list statement .)
    CONSTANT        reduce using rule 189 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 189 (statement_list -> statement_list statement .)
    L_BRACKET       reduce using rule 189 (statement_list -> statement_list statement .)


state 172

    (202) jump_statement -> RETURN SEMICOLON .

    R_BRACE         reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    CASE            reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    L_BRACE         reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    DO              reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    INC_OP          reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    DEC_OP          reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    AND             reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    TIMES           reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    TILD            reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    CONSTANT        reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    STRING_LITERAL  reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    L_BRACKET       reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 202 (jump_statement -> RETURN SEMICOLON .)


state 173

    (203) jump_statement -> RETURN expression . SEMICOLON
    (73) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 258
    COMMA           shift and go to state 168


state 174

    (68) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    AND             reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    TIMES           reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    PLUS            reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    MINUS           reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    TILD            reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    NOT             reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    CONSTANT        reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)
    L_BRACKET       reduce using rule 68 (assignment_operator -> RIGHT_ASSIGN .)


state 175

    (65) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    AND             reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    TIMES           reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    PLUS            reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    MINUS           reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    TILD            reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    NOT             reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    CONSTANT        reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)
    L_BRACKET       reduce using rule 65 (assignment_operator -> ADD_ASSIGN .)


state 176

    (61) assignment_operator -> EQUALS .

    INC_OP          reduce using rule 61 (assignment_operator -> EQUALS .)
    DEC_OP          reduce using rule 61 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 61 (assignment_operator -> EQUALS .)
    AND             reduce using rule 61 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 61 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 61 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 61 (assignment_operator -> EQUALS .)
    TILD            reduce using rule 61 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 61 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 61 (assignment_operator -> EQUALS .)
    CONSTANT        reduce using rule 61 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 61 (assignment_operator -> EQUALS .)
    L_BRACKET       reduce using rule 61 (assignment_operator -> EQUALS .)


state 177

    (67) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    AND             reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    TIMES           reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    PLUS            reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    MINUS           reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    TILD            reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    NOT             reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    CONSTANT        reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)
    L_BRACKET       reduce using rule 67 (assignment_operator -> LEFT_ASSIGN .)


state 178

    (64) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    AND             reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    TIMES           reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    PLUS            reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    MINUS           reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    TILD            reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    NOT             reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    CONSTANT        reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)
    L_BRACKET       reduce using rule 64 (assignment_operator -> MOD_ASSIGN .)


state 179

    (69) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    AND             reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    TIMES           reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    PLUS            reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    MINUS           reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    TILD            reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    NOT             reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    CONSTANT        reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 69 (assignment_operator -> AND_ASSIGN .)
    L_BRACKET       reduce using rule 69 (assignment_operator -> AND_ASSIGN .)


state 180

    (71) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    AND             reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    TIMES           reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    PLUS            reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    MINUS           reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    TILD            reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    NOT             reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    CONSTANT        reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> OR_ASSIGN .)
    L_BRACKET       reduce using rule 71 (assignment_operator -> OR_ASSIGN .)


state 181

    (70) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    AND             reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    TIMES           reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    PLUS            reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    MINUS           reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    TILD            reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    NOT             reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    CONSTANT        reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)
    L_BRACKET       reduce using rule 70 (assignment_operator -> XOR_ASSIGN .)


state 182

    (66) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    AND             reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    TIMES           reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    PLUS            reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    MINUS           reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    TILD            reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    NOT             reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    CONSTANT        reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)
    L_BRACKET       reduce using rule 66 (assignment_operator -> SUB_ASSIGN .)


state 183

    (62) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    AND             reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    TIMES           reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    PLUS            reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    MINUS           reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    TILD            reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    NOT             reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    CONSTANT        reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)
    L_BRACKET       reduce using rule 62 (assignment_operator -> MUL_ASSIGN .)


state 184

    (63) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    AND             reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    TIMES           reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    PLUS            reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    MINUS           reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    TILD            reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    NOT             reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    CONSTANT        reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)
    L_BRACKET       reduce using rule 63 (assignment_operator -> DIV_ASSIGN .)


state 185

    (60) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    unary_expression               shift and go to state 92
    primary_expression             shift and go to state 72
    assignment_expression          shift and go to state 259
    conditional_expression         shift and go to state 73
    unary_operator                 shift and go to state 105
    and_expression                 shift and go to state 97
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    additive_expression            shift and go to state 95
    equality_expression            shift and go to state 117
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    exclusive_or_expression        shift and go to state 109
    cast_expression                shift and go to state 90

state 186

    (54) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    inclusive_or_expression        shift and go to state 260
    and_expression                 shift and go to state 97
    additive_expression            shift and go to state 95
    unary_operator                 shift and go to state 105
    equality_expression            shift and go to state 117
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    cast_expression                shift and go to state 90
    exclusive_or_expression        shift and go to state 109

state 187

    (35) additive_expression -> additive_expression MINUS . multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 83
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    cast_expression                shift and go to state 90
    multiplicative_expression      shift and go to state 261

state 188

    (34) additive_expression -> additive_expression PLUS . multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 83
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    cast_expression                shift and go to state 90
    multiplicative_expression      shift and go to state 262

state 189

    (48) and_expression -> and_expression AND . equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    equality_expression            shift and go to state 263
    cast_expression                shift and go to state 90

state 190

    (31) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 83
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    cast_expression                shift and go to state 264

state 191

    (30) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 83
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    cast_expression                shift and go to state 265

state 192

    (32) multiplicative_expression -> multiplicative_expression MOD . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 83
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    cast_expression                shift and go to state 266

state 193

    (179) labeled_statement -> IDENTIFIER COLON . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 267
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 194

    (18) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    INF             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    SUP             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    EXOR            reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    INTER           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    R_HOOK          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    R_BRACKET       reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 18 (unary_expression -> unary_operator cast_expression .)
    R_BRACE         reduce using rule 18 (unary_expression -> unary_operator cast_expression .)


state 195

    (52) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    and_expression                 shift and go to state 97
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    equality_expression            shift and go to state 117
    exclusive_or_expression        shift and go to state 268
    cast_expression                shift and go to state 90

state 196

    (16) unary_expression -> INC_OP unary_expression .

    TIMES           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    DIVIDE          reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    MOD             reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    PLUS            reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    MINUS           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    INF             reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    SUP             reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    AND             reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    EXOR            reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    OR              reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    INTER           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    R_HOOK          reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    SEMICOLON       reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    COMMA           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    EQUALS          reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    R_BRACKET       reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    COLON           reduce using rule 16 (unary_expression -> INC_OP unary_expression .)
    R_BRACE         reduce using rule 16 (unary_expression -> INC_OP unary_expression .)


state 197

    (28) cast_expression -> L_BRACKET type_name . R_BRACKET cast_expression

    R_BRACKET       shift and go to state 269


state 198

    (154) type_name -> specifier_qualifier_list .
    (155) type_name -> specifier_qualifier_list . abstract_declarator
    (156) abstract_declarator -> . pointer
    (157) abstract_declarator -> . direct_abstract_declarator
    (158) abstract_declarator -> . pointer direct_abstract_declarator
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (159) direct_abstract_declarator -> . L_BRACKET abstract_declarator R_BRACKET
    (160) direct_abstract_declarator -> . L_HOOK R_HOOK
    (161) direct_abstract_declarator -> . L_HOOK constant_expression R_HOOK
    (162) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK R_HOOK
    (163) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK constant_expression R_HOOK
    (164) direct_abstract_declarator -> . L_BRACKET R_BRACKET
    (165) direct_abstract_declarator -> . L_BRACKET parameter_type_list R_BRACKET
    (166) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET R_BRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET

    R_BRACKET       reduce using rule 154 (type_name -> specifier_qualifier_list .)
    TIMES           shift and go to state 10
    L_BRACKET       shift and go to state 272
    L_HOOK          shift and go to state 224

    pointer                        shift and go to state 271
    direct_abstract_declarator     shift and go to state 227
    abstract_declarator            shift and go to state 270

state 199

    (4) primary_expression -> L_BRACKET expression . R_BRACKET
    (73) expression -> expression . COMMA assignment_expression

    R_BRACKET       shift and go to state 273
    COMMA           shift and go to state 168


state 200

    (50) exclusive_or_expression -> exclusive_or_expression EXOR . and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    and_expression                 shift and go to state 274
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    equality_expression            shift and go to state 117
    cast_expression                shift and go to state 90

state 201

    (199) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 275


state 202

    (200) jump_statement -> CONTINUE SEMICOLON .

    R_BRACE         reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    L_BRACE         reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    SWITCH          reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    INC_OP          reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    DEC_OP          reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    AND             reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    TIMES           reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    TILD            reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    CONSTANT        reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    L_BRACKET       reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 200 (jump_statement -> CONTINUE SEMICOLON .)


state 203

    (192) selection_statement -> IF L_BRACKET . expression R_BRACKET statement
    (193) selection_statement -> IF L_BRACKET . expression R_BRACKET statement ELSE statement
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    expression                     shift and go to state 276
    logical_and_expression         shift and go to state 94

state 204

    (38) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 83
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 277
    cast_expression                shift and go to state 90
    multiplicative_expression      shift and go to state 99

state 205

    (37) shift_expression -> shift_expression LEFT_OP . additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 83
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 278
    cast_expression                shift and go to state 90
    multiplicative_expression      shift and go to state 99

state 206

    (201) jump_statement -> BREAK SEMICOLON .

    R_BRACE         reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    CASE            reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    L_BRACE         reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    SWITCH          reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    INC_OP          reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    DEC_OP          reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    AND             reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    TIMES           reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    TILD            reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    CONSTANT        reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    L_BRACKET       reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 201 (jump_statement -> BREAK SEMICOLON .)


state 207

    (46) equality_expression -> equality_expression NE_OP . relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 279
    cast_expression                shift and go to state 90

state 208

    (45) equality_expression -> equality_expression EQ_OP . relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 280
    cast_expression                shift and go to state 90

state 209

    (185) compound_statement -> L_BRACE declaration_list statement_list . R_BRACE
    (189) statement_list -> statement_list . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    R_BRACE         shift and go to state 281
    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 171
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 210

    (184) compound_statement -> L_BRACE declaration_list R_BRACE .

    TYPEDEF         reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    EXTERN          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    STATIC          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    AUTO            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    REGISTER        reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    VOID            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CHAR            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SHORT           reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    INT             reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    LONG            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    BOOL            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    FLOAT           reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    DOUBLE          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SIGNED          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    UNSIGNED        reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CONST           reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    VOLATILE        reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    TIMES           reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    IDENTIFIER      reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    L_BRACKET       reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    ENUM            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    STRUCT          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    UNION           reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    $end            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    R_BRACE         reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CASE            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    DEFAULT         reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    L_BRACE         reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SEMICOLON       reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    IF              reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SWITCH          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    WHILE           reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    DO              reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    FOR             reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    GOTO            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CONTINUE        reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    BREAK           reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    RETURN          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    INC_OP          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    DEC_OP          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    SIZEOF          reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    AND             reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    PLUS            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    MINUS           reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    TILD            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    NOT             reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    CONSTANT        reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    STRING_LITERAL  reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)
    ELSE            reduce using rule 184 (compound_statement -> L_BRACE declaration_list R_BRACE .)


state 211

    (43) relational_expression -> relational_expression GE_OP . shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 282
    multiplicative_expression      shift and go to state 99
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90

state 212

    (42) relational_expression -> relational_expression LE_OP . shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 283
    multiplicative_expression      shift and go to state 99
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90

state 213

    (40) relational_expression -> relational_expression INF . shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 284
    multiplicative_expression      shift and go to state 99
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90

state 214

    (41) relational_expression -> relational_expression SUP . shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 285
    multiplicative_expression      shift and go to state 99
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90

state 215

    (180) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 286


state 216

    (20) unary_expression -> SIZEOF L_BRACKET . type_name R_BRACKET
    (4) primary_expression -> L_BRACKET . expression R_BRACKET
    (154) type_name -> . specifier_qualifier_list
    (155) type_name -> . specifier_qualifier_list abstract_declarator
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (112) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (113) specifier_qualifier_list -> . type_specifier
    (114) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_qualifier
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    ENUM            shift and go to state 36
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    struct_or_union_specifier      shift and go to state 17
    shift_expression               shift and go to state 115
    inclusive_or_expression        shift and go to state 106
    type_qualifier                 shift and go to state 139
    struct_or_union                shift and go to state 34
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    type_specifier                 shift and go to state 141
    cast_expression                shift and go to state 90
    type_name                      shift and go to state 287
    unary_expression               shift and go to state 92
    enum_specifier                 shift and go to state 27
    logical_and_expression         shift and go to state 94
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    specifier_qualifier_list       shift and go to state 198
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    expression                     shift and go to state 199
    exclusive_or_expression        shift and go to state 109

state 217

    (19) unary_expression -> SIZEOF unary_expression .

    TIMES           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    MOD             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    INF             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    SUP             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    EXOR            reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    INTER           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    R_HOOK          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    EQUALS          reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    R_BRACKET       reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)
    R_BRACE         reduce using rule 19 (unary_expression -> SIZEOF unary_expression .)


state 218

    (181) labeled_statement -> DEFAULT COLON . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 288
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 219

    (134) direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .

    L_HOOK          reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    L_BRACKET       reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    COLON           reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    SEMICOLON       reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    COMMA           reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    R_BRACKET       reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    EQUALS          reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    L_BRACE         reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    TYPEDEF         reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    EXTERN          reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    STATIC          reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    AUTO            reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    REGISTER        reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    VOID            reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    CHAR            reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    SHORT           reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    INT             reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    LONG            reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    BOOL            reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    FLOAT           reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    DOUBLE          reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    SIGNED          reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    UNSIGNED        reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    CONST           reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    VOLATILE        reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    ENUM            reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    STRUCT          reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)
    UNION           reduce using rule 134 (direct_declarator -> direct_declarator L_HOOK constant_expression R_HOOK .)


state 220

    (153) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 289


state 221

    (137) direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .

    L_HOOK          reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    L_BRACKET       reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    COLON           reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    SEMICOLON       reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    COMMA           reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    R_BRACKET       reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    EQUALS          reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    L_BRACE         reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    TYPEDEF         reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    EXTERN          reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    STATIC          reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    AUTO            reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    REGISTER        reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    VOID            reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    CHAR            reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    SHORT           reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    INT             reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    LONG            reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    BOOL            reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    FLOAT           reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    DOUBLE          reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    SIGNED          reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    UNSIGNED        reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    CONST           reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    VOLATILE        reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    ENUM            reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    STRUCT          reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)
    UNION           reduce using rule 137 (direct_declarator -> direct_declarator L_BRACKET identifier_list R_BRACKET .)


state 222

    (150) parameter_declaration -> declaration_specifiers abstract_declarator .

    COMMA           reduce using rule 150 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    R_BRACKET       reduce using rule 150 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 223

    (133) direct_declarator -> L_BRACKET . declarator R_BRACKET
    (159) direct_abstract_declarator -> L_BRACKET . abstract_declarator R_BRACKET
    (164) direct_abstract_declarator -> L_BRACKET . R_BRACKET
    (165) direct_abstract_declarator -> L_BRACKET . parameter_type_list R_BRACKET
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (156) abstract_declarator -> . pointer
    (157) abstract_declarator -> . direct_abstract_declarator
    (158) abstract_declarator -> . pointer direct_abstract_declarator
    (145) parameter_type_list -> . parameter_list
    (146) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET
    (159) direct_abstract_declarator -> . L_BRACKET abstract_declarator R_BRACKET
    (160) direct_abstract_declarator -> . L_HOOK R_HOOK
    (161) direct_abstract_declarator -> . L_HOOK constant_expression R_HOOK
    (162) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK R_HOOK
    (163) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK constant_expression R_HOOK
    (164) direct_abstract_declarator -> . L_BRACKET R_BRACKET
    (165) direct_abstract_declarator -> . L_BRACKET parameter_type_list R_BRACKET
    (166) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET R_BRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET
    (147) parameter_list -> . parameter_declaration
    (148) parameter_list -> . parameter_list COMMA parameter_declaration
    (149) parameter_declaration -> . declaration_specifiers declarator
    (150) parameter_declaration -> . declaration_specifiers abstract_declarator
    (151) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    R_BRACKET       shift and go to state 292
    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 223
    L_HOOK          shift and go to state 224
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    enum_specifier                 shift and go to state 27
    parameter_type_list            shift and go to state 291
    direct_declarator              shift and go to state 29
    abstract_declarator            shift and go to state 290
    struct_or_union_specifier      shift and go to state 17
    type_qualifier                 shift and go to state 20
    type_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 34
    declaration_specifiers         shift and go to state 133
    pointer                        shift and go to state 225
    parameter_list                 shift and go to state 134
    parameter_declaration          shift and go to state 135
    declarator                     shift and go to state 50
    direct_abstract_declarator     shift and go to state 227
    storage_class_specifier        shift and go to state 22

state 224

    (160) direct_abstract_declarator -> L_HOOK . R_HOOK
    (161) direct_abstract_declarator -> L_HOOK . constant_expression R_HOOK
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    R_HOOK          shift and go to state 293
    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    equality_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 106
    unary_operator                 shift and go to state 105
    conditional_expression         shift and go to state 126
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 131
    and_expression                 shift and go to state 97
    shift_expression               shift and go to state 115
    constant_expression            shift and go to state 294
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109

state 225

    (130) declarator -> pointer . direct_declarator
    (156) abstract_declarator -> pointer .
    (158) abstract_declarator -> pointer . direct_abstract_declarator
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET
    (159) direct_abstract_declarator -> . L_BRACKET abstract_declarator R_BRACKET
    (160) direct_abstract_declarator -> . L_HOOK R_HOOK
    (161) direct_abstract_declarator -> . L_HOOK constant_expression R_HOOK
    (162) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK R_HOOK
    (163) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK constant_expression R_HOOK
    (164) direct_abstract_declarator -> . L_BRACKET R_BRACKET
    (165) direct_abstract_declarator -> . L_BRACKET parameter_type_list R_BRACKET
    (166) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET R_BRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET

    R_BRACKET       reduce using rule 156 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 156 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 223
    L_HOOK          shift and go to state 224

    direct_declarator              shift and go to state 53
    direct_abstract_declarator     shift and go to state 295

state 226

    (149) parameter_declaration -> declaration_specifiers declarator .

    COMMA           reduce using rule 149 (parameter_declaration -> declaration_specifiers declarator .)
    R_BRACKET       reduce using rule 149 (parameter_declaration -> declaration_specifiers declarator .)


state 227

    (157) abstract_declarator -> direct_abstract_declarator .
    (162) direct_abstract_declarator -> direct_abstract_declarator . L_HOOK R_HOOK
    (163) direct_abstract_declarator -> direct_abstract_declarator . L_HOOK constant_expression R_HOOK
    (166) direct_abstract_declarator -> direct_abstract_declarator . L_BRACKET R_BRACKET
    (167) direct_abstract_declarator -> direct_abstract_declarator . L_BRACKET parameter_type_list R_BRACKET

    R_BRACKET       reduce using rule 157 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 157 (abstract_declarator -> direct_abstract_declarator .)
    L_HOOK          shift and go to state 296
    L_BRACKET       shift and go to state 297


state 228

    (146) parameter_type_list -> parameter_list COMMA . ELLIPSIS
    (148) parameter_list -> parameter_list COMMA . parameter_declaration
    (149) parameter_declaration -> . declaration_specifiers declarator
    (150) parameter_declaration -> . declaration_specifiers abstract_declarator
    (151) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 299
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    enum_specifier                 shift and go to state 27
    parameter_declaration          shift and go to state 298
    struct_or_union_specifier      shift and go to state 17
    declaration_specifiers         shift and go to state 133
    type_qualifier                 shift and go to state 20
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    type_specifier                 shift and go to state 24

state 229

    (136) direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .

    L_HOOK          reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    L_BRACKET       reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    COLON           reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    SEMICOLON       reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    COMMA           reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    R_BRACKET       reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    EQUALS          reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    L_BRACE         reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    TYPEDEF         reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    EXTERN          reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    STATIC          reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    AUTO            reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    REGISTER        reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    VOID            reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    CHAR            reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    SHORT           reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    INT             reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    LONG            reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    BOOL            reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    FLOAT           reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    DOUBLE          reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    SIGNED          reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    UNSIGNED        reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    CONST           reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    VOLATILE        reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    ENUM            reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    STRUCT          reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)
    UNION           reduce using rule 136 (direct_declarator -> direct_declarator L_BRACKET parameter_type_list R_BRACKET .)


state 230

    (114) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    COLON           reduce using rule 114 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    TIMES           reduce using rule 114 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 114 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    L_BRACKET       reduce using rule 114 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    L_HOOK          reduce using rule 114 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    R_BRACKET       reduce using rule 114 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 231

    (116) struct_declarator_list -> struct_declarator .

    SEMICOLON       reduce using rule 116 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 116 (struct_declarator_list -> struct_declarator .)


state 232

    (119) struct_declarator -> COLON . constant_expression
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    equality_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 106
    unary_operator                 shift and go to state 105
    conditional_expression         shift and go to state 126
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 131
    and_expression                 shift and go to state 97
    shift_expression               shift and go to state 115
    constant_expression            shift and go to state 300
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109

state 233

    (118) struct_declarator -> declarator .
    (120) struct_declarator -> declarator . COLON constant_expression

    SEMICOLON       reduce using rule 118 (struct_declarator -> declarator .)
    COMMA           reduce using rule 118 (struct_declarator -> declarator .)
    COLON           shift and go to state 301


state 234

    (111) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMICOLON
    (117) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMICOLON       shift and go to state 303
    COMMA           shift and go to state 302


state 235

    (112) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 112 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    TIMES           reduce using rule 112 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 112 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    L_BRACKET       reduce using rule 112 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    L_HOOK          reduce using rule 112 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    R_BRACKET       reduce using rule 112 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 236

    (105) struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .

    VOID            reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    CHAR            reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    SHORT           reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    INT             reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    LONG            reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    BOOL            reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    FLOAT           reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    DOUBLE          reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    SIGNED          reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    UNSIGNED        reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    CONST           reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    VOLATILE        reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    ENUM            reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    STRUCT          reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    UNION           reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    COLON           reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    TIMES           reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    IDENTIFIER      reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    L_BRACKET       reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    TYPEDEF         reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    EXTERN          reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    STATIC          reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    AUTO            reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    REGISTER        reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    SEMICOLON       reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    L_HOOK          reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    R_BRACKET       reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)
    COMMA           reduce using rule 105 (struct_or_union_specifier -> struct_or_union L_BRACE struct_declaration_list R_BRACE .)


state 237

    (110) struct_declaration_list -> struct_declaration_list struct_declaration .

    R_BRACE         reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 110 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 238

    (104) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list . R_BRACE
    (110) struct_declaration_list -> struct_declaration_list . struct_declaration
    (111) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMICOLON
    (112) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (113) specifier_qualifier_list -> . type_specifier
    (114) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_qualifier
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    R_BRACE         shift and go to state 304
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    type_qualifier                 shift and go to state 139
    type_specifier                 shift and go to state 141
    struct_or_union                shift and go to state 34
    enum_specifier                 shift and go to state 27
    struct_declaration             shift and go to state 237
    struct_or_union_specifier      shift and go to state 17
    specifier_qualifier_list       shift and go to state 140

state 239

    (122) enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list . R_BRACE
    (125) enumerator_list -> enumerator_list . COMMA enumerator

    R_BRACE         shift and go to state 305
    COMMA           shift and go to state 242


state 240

    (127) enumerator -> IDENTIFIER EQUALS . constant_expression
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    equality_expression            shift and go to state 117
    inclusive_or_expression        shift and go to state 106
    unary_operator                 shift and go to state 105
    conditional_expression         shift and go to state 126
    additive_expression            shift and go to state 95
    unary_expression               shift and go to state 131
    and_expression                 shift and go to state 97
    shift_expression               shift and go to state 115
    constant_expression            shift and go to state 306
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109

state 241

    (121) enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .

    TYPEDEF         reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    EXTERN          reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    STATIC          reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    AUTO            reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    REGISTER        reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    VOID            reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    CHAR            reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    SHORT           reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    INT             reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    LONG            reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    BOOL            reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    FLOAT           reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    DOUBLE          reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    SIGNED          reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    UNSIGNED        reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    CONST           reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    VOLATILE        reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    ENUM            reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    STRUCT          reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    UNION           reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    SEMICOLON       reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    TIMES           reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    IDENTIFIER      reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    L_BRACKET       reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    L_HOOK          reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    COMMA           reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    R_BRACKET       reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)
    COLON           reduce using rule 121 (enum_specifier -> ENUM L_BRACE enumerator_list R_BRACE .)


state 242

    (125) enumerator_list -> enumerator_list COMMA . enumerator
    (126) enumerator -> . IDENTIFIER
    (127) enumerator -> . IDENTIFIER EQUALS constant_expression

    IDENTIFIER      shift and go to state 146

    enumerator                     shift and go to state 307

state 243

    (169) initializer -> L_BRACE initializer_list . R_BRACE
    (170) initializer -> L_BRACE initializer_list . COMMA R_BRACE
    (172) initializer_list -> initializer_list . COMMA initializer

    R_BRACE         shift and go to state 308
    COMMA           shift and go to state 309


state 244

    (171) initializer_list -> initializer .

    R_BRACE         reduce using rule 171 (initializer_list -> initializer .)
    COMMA           reduce using rule 171 (initializer_list -> initializer .)


state 245

    (196) iteration_statement -> DO statement WHILE . L_BRACKET expression R_BRACKET SEMICOLON

    L_BRACKET       shift and go to state 310


state 246

    (195) iteration_statement -> WHILE L_BRACKET expression . R_BRACKET statement
    (73) expression -> expression . COMMA assignment_expression

    R_BRACKET       shift and go to state 311
    COMMA           shift and go to state 168


state 247

    (58) conditional_expression -> logical_or_expression INTER expression . COLON conditional_expression
    (73) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 312
    COMMA           shift and go to state 168


state 248

    (56) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (54) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    INTER           reduce using rule 56 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 56 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    SEMICOLON       reduce using rule 56 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COMMA           reduce using rule 56 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    R_BRACKET       reduce using rule 56 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    R_BRACE         reduce using rule 56 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    COLON           reduce using rule 56 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    R_HOOK          reduce using rule 56 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 186


state 249

    (197) iteration_statement -> FOR L_BRACKET expression_statement . expression_statement R_BRACKET statement
    (198) iteration_statement -> FOR L_BRACKET expression_statement . expression_statement expression R_BRACKET statement
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    SEMICOLON       shift and go to state 89
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 313
    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94

state 250

    (7) postfix_expression -> postfix_expression L_BRACKET R_BRACKET .

    L_BRACE         reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    L_BRACKET       reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    POINT           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    PTR_OP          reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    INC_OP          reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    DEC_OP          reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    EQUALS          reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    MUL_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    DIV_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    MOD_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    ADD_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    SUB_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    LEFT_ASSIGN     reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    AND_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    XOR_ASSIGN      reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    OR_ASSIGN       reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    TIMES           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    DIVIDE          reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    MOD             reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    PLUS            reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    MINUS           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    LEFT_OP         reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    RIGHT_OP        reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    INF             reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    SUP             reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    LE_OP           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    GE_OP           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    EQ_OP           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    NE_OP           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    AND             reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    EXOR            reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    OR              reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    AND_OP          reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    INTER           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    OR_OP           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    SEMICOLON       reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    COMMA           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    R_BRACKET       reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    R_HOOK          reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    COLON           reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)
    R_BRACE         reduce using rule 7 (postfix_expression -> postfix_expression L_BRACKET R_BRACKET .)


state 251

    (13) argument_expression_list -> assignment_expression .

    R_BRACKET       reduce using rule 13 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 13 (argument_expression_list -> assignment_expression .)


state 252

    (8) postfix_expression -> postfix_expression L_BRACKET argument_expression_list . R_BRACKET
    (14) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    R_BRACKET       shift and go to state 314
    COMMA           shift and go to state 315


state 253

    (9) postfix_expression -> postfix_expression POINT IDENTIFIER .

    L_BRACE         reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    L_BRACKET       reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    POINT           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    PTR_OP          reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    INC_OP          reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    DEC_OP          reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    EQUALS          reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    AND_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    OR_ASSIGN       reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    TIMES           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    DIVIDE          reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    MOD             reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    PLUS            reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    MINUS           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    LEFT_OP         reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    RIGHT_OP        reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    INF             reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    SUP             reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    LE_OP           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    GE_OP           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    EQ_OP           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    NE_OP           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    AND             reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    EXOR            reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    OR              reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    AND_OP          reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    INTER           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    OR_OP           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    SEMICOLON       reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    COMMA           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    R_BRACKET       reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    R_HOOK          reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    COLON           reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)
    R_BRACE         reduce using rule 9 (postfix_expression -> postfix_expression POINT IDENTIFIER .)


state 254

    (6) postfix_expression -> postfix_expression L_BRACE expression . R_BRACE
    (73) expression -> expression . COMMA assignment_expression

    R_BRACE         shift and go to state 316
    COMMA           shift and go to state 168


state 255

    (10) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    L_BRACE         reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    L_BRACKET       reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    POINT           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQUALS          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    TIMES           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIVIDE          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PLUS            reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MINUS           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INF             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUP             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND             reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EXOR            reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR              reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INTER           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SEMICOLON       reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COMMA           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    R_BRACKET       reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    R_HOOK          reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    COLON           reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    R_BRACE         reduce using rule 10 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 256

    (73) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 73 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 73 (expression -> expression COMMA assignment_expression .)
    R_BRACE         reduce using rule 73 (expression -> expression COMMA assignment_expression .)
    R_BRACKET       reduce using rule 73 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 73 (expression -> expression COMMA assignment_expression .)


state 257

    (194) selection_statement -> SWITCH L_BRACKET expression . R_BRACKET statement
    (73) expression -> expression . COMMA assignment_expression

    R_BRACKET       shift and go to state 317
    COMMA           shift and go to state 168


state 258

    (203) jump_statement -> RETURN expression SEMICOLON .

    R_BRACE         reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    L_BRACE         reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    DO              reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    INC_OP          reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    DEC_OP          reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    AND             reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    TIMES           reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    TILD            reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    CONSTANT        reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    L_BRACKET       reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 203 (jump_statement -> RETURN expression SEMICOLON .)


state 259

    (60) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMICOLON       reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    R_BRACKET       reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    R_BRACE         reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 60 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 260

    (54) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (52) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AND_OP          reduce using rule 54 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    INTER           reduce using rule 54 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 54 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    SEMICOLON       reduce using rule 54 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COMMA           reduce using rule 54 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    R_BRACKET       reduce using rule 54 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    R_BRACE         reduce using rule 54 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    COLON           reduce using rule 54 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    R_HOOK          reduce using rule 54 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR              shift and go to state 195


state 261

    (35) additive_expression -> additive_expression MINUS multiplicative_expression .
    (30) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (31) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (32) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_OP         reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INF             reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SUP             reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE_OP           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE_OP           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_OP           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE_OP           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EXOR            reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_OP          reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTER           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OP           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    R_BRACKET       reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    R_BRACE         reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    R_HOOK          reduce using rule 35 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 191
    DIVIDE          shift and go to state 190
    MOD             shift and go to state 192


state 262

    (34) additive_expression -> additive_expression PLUS multiplicative_expression .
    (30) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (31) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (32) multiplicative_expression -> multiplicative_expression . MOD cast_expression

    PLUS            reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_OP         reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_OP        reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INF             reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SUP             reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE_OP           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE_OP           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_OP           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE_OP           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EXOR            reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_OP          reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTER           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OP           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    R_BRACKET       reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    R_BRACE         reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    R_HOOK          reduce using rule 34 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 191
    DIVIDE          shift and go to state 190
    MOD             shift and go to state 192


state 263

    (48) and_expression -> and_expression AND equality_expression .
    (45) equality_expression -> equality_expression . EQ_OP relational_expression
    (46) equality_expression -> equality_expression . NE_OP relational_expression

    AND             reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    EXOR            reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    AND_OP          reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    INTER           reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    OR_OP           reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    R_BRACE         reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    R_BRACKET       reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    R_HOOK          reduce using rule 48 (and_expression -> and_expression AND equality_expression .)
    EQ_OP           shift and go to state 208
    NE_OP           shift and go to state 207


state 264

    (31) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MOD             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_OP         reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_OP        reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    INF             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SUP             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE_OP           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE_OP           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ_OP           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NE_OP           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EXOR            reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND_OP          reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    INTER           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR_OP           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    R_BRACKET       reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    R_HOOK          reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    R_BRACE         reduce using rule 31 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 265

    (30) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MOD             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LEFT_OP         reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RIGHT_OP        reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    INF             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SUP             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE_OP           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE_OP           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ_OP           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NE_OP           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND             reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EXOR            reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR              reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    AND_OP          reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    INTER           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    OR_OP           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    R_BRACKET       reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMICOLON       reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    R_HOOK          reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COLON           reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    R_BRACE         reduce using rule 30 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 266

    (32) multiplicative_expression -> multiplicative_expression MOD cast_expression .

    TIMES           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    DIVIDE          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MOD             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    PLUS            reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    MINUS           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LEFT_OP         reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    RIGHT_OP        reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    INF             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SUP             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    LE_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    GE_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EQ_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    NE_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND             reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    EXOR            reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR              reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    AND_OP          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    INTER           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    OR_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    R_BRACKET       reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COMMA           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    SEMICOLON       reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    R_HOOK          reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    COLON           reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)
    R_BRACE         reduce using rule 32 (multiplicative_expression -> multiplicative_expression MOD cast_expression .)


state 267

    (179) labeled_statement -> IDENTIFIER COLON statement .

    R_BRACE         reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    L_BRACE         reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    INC_OP          reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    DEC_OP          reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    AND             reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    TIMES           reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    TILD            reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    NOT             reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    CONSTANT        reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LITERAL  reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    L_BRACKET       reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 179 (labeled_statement -> IDENTIFIER COLON statement .)


state 268

    (52) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (50) exclusive_or_expression -> exclusive_or_expression . EXOR and_expression

    OR              reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    AND_OP          reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    INTER           reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    OR_OP           reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMICOLON       reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    R_BRACKET       reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COLON           reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    R_BRACE         reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    R_HOOK          reduce using rule 52 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    EXOR            shift and go to state 200


state 269

    (28) cast_expression -> L_BRACKET type_name R_BRACKET . cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    postfix_expression             shift and go to state 83
    unary_operator                 shift and go to state 105
    primary_expression             shift and go to state 72
    cast_expression                shift and go to state 318

state 270

    (155) type_name -> specifier_qualifier_list abstract_declarator .

    R_BRACKET       reduce using rule 155 (type_name -> specifier_qualifier_list abstract_declarator .)


state 271

    (156) abstract_declarator -> pointer .
    (158) abstract_declarator -> pointer . direct_abstract_declarator
    (159) direct_abstract_declarator -> . L_BRACKET abstract_declarator R_BRACKET
    (160) direct_abstract_declarator -> . L_HOOK R_HOOK
    (161) direct_abstract_declarator -> . L_HOOK constant_expression R_HOOK
    (162) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK R_HOOK
    (163) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK constant_expression R_HOOK
    (164) direct_abstract_declarator -> . L_BRACKET R_BRACKET
    (165) direct_abstract_declarator -> . L_BRACKET parameter_type_list R_BRACKET
    (166) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET R_BRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET

    R_BRACKET       reduce using rule 156 (abstract_declarator -> pointer .)
    L_BRACKET       shift and go to state 272
    L_HOOK          shift and go to state 224

    direct_abstract_declarator     shift and go to state 295

state 272

    (159) direct_abstract_declarator -> L_BRACKET . abstract_declarator R_BRACKET
    (164) direct_abstract_declarator -> L_BRACKET . R_BRACKET
    (165) direct_abstract_declarator -> L_BRACKET . parameter_type_list R_BRACKET
    (156) abstract_declarator -> . pointer
    (157) abstract_declarator -> . direct_abstract_declarator
    (158) abstract_declarator -> . pointer direct_abstract_declarator
    (145) parameter_type_list -> . parameter_list
    (146) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (159) direct_abstract_declarator -> . L_BRACKET abstract_declarator R_BRACKET
    (160) direct_abstract_declarator -> . L_HOOK R_HOOK
    (161) direct_abstract_declarator -> . L_HOOK constant_expression R_HOOK
    (162) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK R_HOOK
    (163) direct_abstract_declarator -> . direct_abstract_declarator L_HOOK constant_expression R_HOOK
    (164) direct_abstract_declarator -> . L_BRACKET R_BRACKET
    (165) direct_abstract_declarator -> . L_BRACKET parameter_type_list R_BRACKET
    (166) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET R_BRACKET
    (167) direct_abstract_declarator -> . direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET
    (147) parameter_list -> . parameter_declaration
    (148) parameter_list -> . parameter_list COMMA parameter_declaration
    (149) parameter_declaration -> . declaration_specifiers declarator
    (150) parameter_declaration -> . declaration_specifiers abstract_declarator
    (151) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    R_BRACKET       shift and go to state 292
    TIMES           shift and go to state 10
    L_BRACKET       shift and go to state 272
    L_HOOK          shift and go to state 224
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    enum_specifier                 shift and go to state 27
    parameter_type_list            shift and go to state 291
    abstract_declarator            shift and go to state 290
    struct_or_union_specifier      shift and go to state 17
    declaration_specifiers         shift and go to state 133
    type_qualifier                 shift and go to state 20
    type_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    pointer                        shift and go to state 271
    parameter_list                 shift and go to state 134
    parameter_declaration          shift and go to state 135
    direct_abstract_declarator     shift and go to state 227

state 273

    (4) primary_expression -> L_BRACKET expression R_BRACKET .

    L_BRACE         reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    L_BRACKET       reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    POINT           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    PTR_OP          reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    INC_OP          reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    DEC_OP          reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    EQUALS          reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    LEFT_ASSIGN     reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    TIMES           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    DIVIDE          reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    MOD             reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    PLUS            reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    MINUS           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    LEFT_OP         reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    RIGHT_OP        reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    INF             reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    SUP             reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    LE_OP           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    GE_OP           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    EQ_OP           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    NE_OP           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    AND             reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    EXOR            reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    OR              reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    AND_OP          reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    INTER           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    OR_OP           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    SEMICOLON       reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    COMMA           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    R_HOOK          reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    R_BRACKET       reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    COLON           reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)
    R_BRACE         reduce using rule 4 (primary_expression -> L_BRACKET expression R_BRACKET .)


state 274

    (50) exclusive_or_expression -> exclusive_or_expression EXOR and_expression .
    (48) and_expression -> and_expression . AND equality_expression

    EXOR            reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    OR              reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    AND_OP          reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    INTER           reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    OR_OP           reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    R_BRACE         reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    COMMA           reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    R_BRACKET       reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    SEMICOLON       reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    R_HOOK          reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    COLON           reduce using rule 50 (exclusive_or_expression -> exclusive_or_expression EXOR and_expression .)
    AND             shift and go to state 189


state 275

    (199) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    R_BRACE         reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    L_BRACE         reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DO              reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INC_OP          reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DEC_OP          reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AND             reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TIMES           reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TILD            reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONSTANT        reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_LITERAL  reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    L_BRACKET       reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 199 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 276

    (192) selection_statement -> IF L_BRACKET expression . R_BRACKET statement
    (193) selection_statement -> IF L_BRACKET expression . R_BRACKET statement ELSE statement
    (73) expression -> expression . COMMA assignment_expression

    R_BRACKET       shift and go to state 319
    COMMA           shift and go to state 168


state 277

    (38) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (34) additive_expression -> additive_expression . PLUS multiplicative_expression
    (35) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    INF             reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SUP             reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND             reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EXOR            reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR              reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    INTER           reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    SEMICOLON       reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COMMA           reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    R_BRACKET       reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    R_HOOK          reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    COLON           reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    R_BRACE         reduce using rule 38 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    PLUS            shift and go to state 188
    MINUS           shift and go to state 187


state 278

    (37) shift_expression -> shift_expression LEFT_OP additive_expression .
    (34) additive_expression -> additive_expression . PLUS multiplicative_expression
    (35) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_OP         reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    INF             reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SUP             reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND             reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EXOR            reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR              reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    INTER           reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    SEMICOLON       reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COMMA           reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    R_BRACKET       reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    R_HOOK          reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    COLON           reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    R_BRACE         reduce using rule 37 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    PLUS            shift and go to state 188
    MINUS           shift and go to state 187


state 279

    (46) equality_expression -> equality_expression NE_OP relational_expression .
    (40) relational_expression -> relational_expression . INF shift_expression
    (41) relational_expression -> relational_expression . SUP shift_expression
    (42) relational_expression -> relational_expression . LE_OP shift_expression
    (43) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND             reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    EXOR            reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR              reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    INTER           reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    SEMICOLON       reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    COMMA           reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    R_HOOK          reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    R_BRACKET       reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    COLON           reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    R_BRACE         reduce using rule 46 (equality_expression -> equality_expression NE_OP relational_expression .)
    INF             shift and go to state 213
    SUP             shift and go to state 214
    LE_OP           shift and go to state 212
    GE_OP           shift and go to state 211


state 280

    (45) equality_expression -> equality_expression EQ_OP relational_expression .
    (40) relational_expression -> relational_expression . INF shift_expression
    (41) relational_expression -> relational_expression . SUP shift_expression
    (42) relational_expression -> relational_expression . LE_OP shift_expression
    (43) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND             reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    EXOR            reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR              reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    INTER           reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    SEMICOLON       reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COMMA           reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    R_HOOK          reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    R_BRACKET       reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    COLON           reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    R_BRACE         reduce using rule 45 (equality_expression -> equality_expression EQ_OP relational_expression .)
    INF             shift and go to state 213
    SUP             shift and go to state 214
    LE_OP           shift and go to state 212
    GE_OP           shift and go to state 211


state 281

    (185) compound_statement -> L_BRACE declaration_list statement_list R_BRACE .

    TYPEDEF         reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    EXTERN          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    STATIC          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    AUTO            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    REGISTER        reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    VOID            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CHAR            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SHORT           reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    INT             reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    LONG            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    BOOL            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    FLOAT           reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    DOUBLE          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SIGNED          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    UNSIGNED        reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CONST           reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    VOLATILE        reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    TIMES           reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    IDENTIFIER      reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    L_BRACKET       reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    ENUM            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    STRUCT          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    UNION           reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    $end            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    R_BRACE         reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CASE            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    DEFAULT         reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    L_BRACE         reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SEMICOLON       reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    IF              reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SWITCH          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    WHILE           reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    DO              reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    FOR             reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    GOTO            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CONTINUE        reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    BREAK           reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    RETURN          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    INC_OP          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    DEC_OP          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    SIZEOF          reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    AND             reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    PLUS            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    MINUS           reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    TILD            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    NOT             reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    CONSTANT        reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    STRING_LITERAL  reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)
    ELSE            reduce using rule 185 (compound_statement -> L_BRACE declaration_list statement_list R_BRACE .)


state 282

    (43) relational_expression -> relational_expression GE_OP shift_expression .
    (37) shift_expression -> shift_expression . LEFT_OP additive_expression
    (38) shift_expression -> shift_expression . RIGHT_OP additive_expression

    INF             reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    SUP             reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND             reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    EXOR            reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR              reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    INTER           reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    SEMICOLON       reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    COMMA           reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    R_BRACKET       reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    R_BRACE         reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    COLON           reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    R_HOOK          reduce using rule 43 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 205
    RIGHT_OP        shift and go to state 204


state 283

    (42) relational_expression -> relational_expression LE_OP shift_expression .
    (37) shift_expression -> shift_expression . LEFT_OP additive_expression
    (38) shift_expression -> shift_expression . RIGHT_OP additive_expression

    INF             reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    SUP             reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND             reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    EXOR            reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR              reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    INTER           reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    SEMICOLON       reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    R_BRACKET       reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    R_BRACE         reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    COLON           reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    R_HOOK          reduce using rule 42 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 205
    RIGHT_OP        shift and go to state 204


state 284

    (40) relational_expression -> relational_expression INF shift_expression .
    (37) shift_expression -> shift_expression . LEFT_OP additive_expression
    (38) shift_expression -> shift_expression . RIGHT_OP additive_expression

    INF             reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    SUP             reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    LE_OP           reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    GE_OP           reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    EQ_OP           reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    NE_OP           reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    AND             reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    EXOR            reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    OR              reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    AND_OP          reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    INTER           reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    OR_OP           reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    SEMICOLON       reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    COMMA           reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    R_BRACKET       reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    R_BRACE         reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    COLON           reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    R_HOOK          reduce using rule 40 (relational_expression -> relational_expression INF shift_expression .)
    LEFT_OP         shift and go to state 205
    RIGHT_OP        shift and go to state 204


state 285

    (41) relational_expression -> relational_expression SUP shift_expression .
    (37) shift_expression -> shift_expression . LEFT_OP additive_expression
    (38) shift_expression -> shift_expression . RIGHT_OP additive_expression

    INF             reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    SUP             reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    LE_OP           reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    GE_OP           reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    EQ_OP           reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    NE_OP           reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    AND             reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    EXOR            reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    OR              reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    AND_OP          reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    INTER           reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    OR_OP           reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    SEMICOLON       reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    COMMA           reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    R_BRACKET       reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    R_BRACE         reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    COLON           reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    R_HOOK          reduce using rule 41 (relational_expression -> relational_expression SUP shift_expression .)
    LEFT_OP         shift and go to state 205
    RIGHT_OP        shift and go to state 204


state 286

    (180) labeled_statement -> CASE constant_expression COLON . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 320
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 287

    (20) unary_expression -> SIZEOF L_BRACKET type_name . R_BRACKET

    R_BRACKET       shift and go to state 321


state 288

    (181) labeled_statement -> DEFAULT COLON statement .

    R_BRACE         reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    L_BRACE         reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    SEMICOLON       reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    INC_OP          reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    DEC_OP          reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    AND             reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    TIMES           reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    PLUS            reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    MINUS           reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    TILD            reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    NOT             reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    CONSTANT        reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    STRING_LITERAL  reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    L_BRACKET       reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 181 (labeled_statement -> DEFAULT COLON statement .)


state 289

    (153) identifier_list -> identifier_list COMMA IDENTIFIER .

    R_BRACKET       reduce using rule 153 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 153 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 290

    (159) direct_abstract_declarator -> L_BRACKET abstract_declarator . R_BRACKET

    R_BRACKET       shift and go to state 322


state 291

    (165) direct_abstract_declarator -> L_BRACKET parameter_type_list . R_BRACKET

    R_BRACKET       shift and go to state 323


state 292

    (164) direct_abstract_declarator -> L_BRACKET R_BRACKET .

    L_HOOK          reduce using rule 164 (direct_abstract_declarator -> L_BRACKET R_BRACKET .)
    L_BRACKET       reduce using rule 164 (direct_abstract_declarator -> L_BRACKET R_BRACKET .)
    R_BRACKET       reduce using rule 164 (direct_abstract_declarator -> L_BRACKET R_BRACKET .)
    COMMA           reduce using rule 164 (direct_abstract_declarator -> L_BRACKET R_BRACKET .)


state 293

    (160) direct_abstract_declarator -> L_HOOK R_HOOK .

    L_HOOK          reduce using rule 160 (direct_abstract_declarator -> L_HOOK R_HOOK .)
    L_BRACKET       reduce using rule 160 (direct_abstract_declarator -> L_HOOK R_HOOK .)
    R_BRACKET       reduce using rule 160 (direct_abstract_declarator -> L_HOOK R_HOOK .)
    COMMA           reduce using rule 160 (direct_abstract_declarator -> L_HOOK R_HOOK .)


state 294

    (161) direct_abstract_declarator -> L_HOOK constant_expression . R_HOOK

    R_HOOK          shift and go to state 324


state 295

    (158) abstract_declarator -> pointer direct_abstract_declarator .
    (162) direct_abstract_declarator -> direct_abstract_declarator . L_HOOK R_HOOK
    (163) direct_abstract_declarator -> direct_abstract_declarator . L_HOOK constant_expression R_HOOK
    (166) direct_abstract_declarator -> direct_abstract_declarator . L_BRACKET R_BRACKET
    (167) direct_abstract_declarator -> direct_abstract_declarator . L_BRACKET parameter_type_list R_BRACKET

    R_BRACKET       reduce using rule 158 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 158 (abstract_declarator -> pointer direct_abstract_declarator .)
    L_HOOK          shift and go to state 296
    L_BRACKET       shift and go to state 297


state 296

    (162) direct_abstract_declarator -> direct_abstract_declarator L_HOOK . R_HOOK
    (163) direct_abstract_declarator -> direct_abstract_declarator L_HOOK . constant_expression R_HOOK
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    R_HOOK          shift and go to state 325
    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 72
    unary_operator                 shift and go to state 105
    conditional_expression         shift and go to state 126
    additive_expression            shift and go to state 95
    and_expression                 shift and go to state 97
    inclusive_or_expression        shift and go to state 106
    equality_expression            shift and go to state 117
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    constant_expression            shift and go to state 326
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109

state 297

    (166) direct_abstract_declarator -> direct_abstract_declarator L_BRACKET . R_BRACKET
    (167) direct_abstract_declarator -> direct_abstract_declarator L_BRACKET . parameter_type_list R_BRACKET
    (145) parameter_type_list -> . parameter_list
    (146) parameter_type_list -> . parameter_list COMMA ELLIPSIS
    (147) parameter_list -> . parameter_declaration
    (148) parameter_list -> . parameter_list COMMA parameter_declaration
    (149) parameter_declaration -> . declaration_specifiers declarator
    (150) parameter_declaration -> . declaration_specifiers abstract_declarator
    (151) parameter_declaration -> . declaration_specifiers
    (77) declaration_specifiers -> . storage_class_specifier
    (78) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (79) declaration_specifiers -> . type_specifier
    (80) declaration_specifiers -> . type_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_qualifier
    (82) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) storage_class_specifier -> . TYPEDEF
    (88) storage_class_specifier -> . EXTERN
    (89) storage_class_specifier -> . STATIC
    (90) storage_class_specifier -> . AUTO
    (91) storage_class_specifier -> . REGISTER
    (92) type_specifier -> . VOID
    (93) type_specifier -> . CHAR
    (94) type_specifier -> . SHORT
    (95) type_specifier -> . INT
    (96) type_specifier -> . LONG
    (97) type_specifier -> . BOOL
    (98) type_specifier -> . FLOAT
    (99) type_specifier -> . DOUBLE
    (100) type_specifier -> . SIGNED
    (101) type_specifier -> . UNSIGNED
    (102) type_specifier -> . struct_or_union_specifier
    (103) type_specifier -> . enum_specifier
    (128) type_qualifier -> . CONST
    (129) type_qualifier -> . VOLATILE
    (104) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE
    (105) struct_or_union_specifier -> . struct_or_union L_BRACE struct_declaration_list R_BRACE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (121) enum_specifier -> . ENUM L_BRACE enumerator_list R_BRACE
    (122) enum_specifier -> . ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE
    (123) enum_specifier -> . ENUM IDENTIFIER
    (107) struct_or_union -> . STRUCT
    (108) struct_or_union -> . UNION

    R_BRACKET       shift and go to state 328
    TYPEDEF         shift and go to state 26
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 16
    AUTO            shift and go to state 7
    REGISTER        shift and go to state 6
    VOID            shift and go to state 21
    CHAR            shift and go to state 15
    SHORT           shift and go to state 31
    INT             shift and go to state 8
    LONG            shift and go to state 12
    BOOL            shift and go to state 5
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 32
    SIGNED          shift and go to state 13
    UNSIGNED        shift and go to state 33
    CONST           shift and go to state 18
    VOLATILE        shift and go to state 25
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 30
    UNION           shift and go to state 3

    enum_specifier                 shift and go to state 27
    parameter_declaration          shift and go to state 135
    struct_or_union_specifier      shift and go to state 17
    declaration_specifiers         shift and go to state 133
    type_qualifier                 shift and go to state 20
    struct_or_union                shift and go to state 34
    storage_class_specifier        shift and go to state 22
    parameter_list                 shift and go to state 134
    parameter_type_list            shift and go to state 327
    type_specifier                 shift and go to state 24

state 298

    (148) parameter_list -> parameter_list COMMA parameter_declaration .

    COMMA           reduce using rule 148 (parameter_list -> parameter_list COMMA parameter_declaration .)
    R_BRACKET       reduce using rule 148 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 299

    (146) parameter_type_list -> parameter_list COMMA ELLIPSIS .

    R_BRACKET       reduce using rule 146 (parameter_type_list -> parameter_list COMMA ELLIPSIS .)


state 300

    (119) struct_declarator -> COLON constant_expression .

    SEMICOLON       reduce using rule 119 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 119 (struct_declarator -> COLON constant_expression .)


state 301

    (120) struct_declarator -> declarator COLON . constant_expression
    (74) constant_expression -> . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    equality_expression            shift and go to state 117
    unary_expression               shift and go to state 131
    unary_operator                 shift and go to state 105
    conditional_expression         shift and go to state 126
    additive_expression            shift and go to state 95
    and_expression                 shift and go to state 97
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    constant_expression            shift and go to state 329
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109

state 302

    (117) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (118) struct_declarator -> . declarator
    (119) struct_declarator -> . COLON constant_expression
    (120) struct_declarator -> . declarator COLON constant_expression
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (139) pointer -> . TIMES
    (140) pointer -> . TIMES type_qualifier_list
    (141) pointer -> . TIMES pointer
    (142) pointer -> . TIMES type_qualifier_list pointer
    (132) direct_declarator -> . IDENTIFIER
    (133) direct_declarator -> . L_BRACKET declarator R_BRACKET
    (134) direct_declarator -> . direct_declarator L_HOOK constant_expression R_HOOK
    (135) direct_declarator -> . direct_declarator L_HOOK R_HOOK
    (136) direct_declarator -> . direct_declarator L_BRACKET parameter_type_list R_BRACKET
    (137) direct_declarator -> . direct_declarator L_BRACKET identifier_list R_BRACKET
    (138) direct_declarator -> . direct_declarator L_BRACKET R_BRACKET

    COLON           shift and go to state 232
    TIMES           shift and go to state 10
    IDENTIFIER      shift and go to state 35
    L_BRACKET       shift and go to state 14

    struct_declarator              shift and go to state 330
    direct_declarator              shift and go to state 29
    pointer                        shift and go to state 23
    declarator                     shift and go to state 233

state 303

    (111) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .

    R_BRACE         reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOID            reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CHAR            reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SHORT           reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    INT             reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    LONG            reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    BOOL            reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    SIGNED          reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNSIGNED        reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    CONST           reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    VOLATILE        reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    ENUM            reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)
    UNION           reduce using rule 111 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMICOLON .)


state 304

    (104) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .

    VOID            reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    CHAR            reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    SHORT           reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    INT             reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    LONG            reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    BOOL            reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    FLOAT           reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    DOUBLE          reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    SIGNED          reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    UNSIGNED        reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    CONST           reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    VOLATILE        reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    ENUM            reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    STRUCT          reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    UNION           reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    COLON           reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    TIMES           reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    IDENTIFIER      reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    L_BRACKET       reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    TYPEDEF         reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    EXTERN          reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    STATIC          reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    AUTO            reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    REGISTER        reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    SEMICOLON       reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    L_HOOK          reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    R_BRACKET       reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)
    COMMA           reduce using rule 104 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACE struct_declaration_list R_BRACE .)


state 305

    (122) enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .

    TYPEDEF         reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    EXTERN          reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    STATIC          reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    AUTO            reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    REGISTER        reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    VOID            reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    CHAR            reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    SHORT           reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    INT             reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    LONG            reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    BOOL            reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    FLOAT           reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    DOUBLE          reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    SIGNED          reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    UNSIGNED        reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    CONST           reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    VOLATILE        reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    ENUM            reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    STRUCT          reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    UNION           reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    SEMICOLON       reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    TIMES           reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    IDENTIFIER      reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    L_BRACKET       reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    L_HOOK          reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    COMMA           reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    R_BRACKET       reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)
    COLON           reduce using rule 122 (enum_specifier -> ENUM IDENTIFIER L_BRACE enumerator_list R_BRACE .)


state 306

    (127) enumerator -> IDENTIFIER EQUALS constant_expression .

    R_BRACE         reduce using rule 127 (enumerator -> IDENTIFIER EQUALS constant_expression .)
    COMMA           reduce using rule 127 (enumerator -> IDENTIFIER EQUALS constant_expression .)


state 307

    (125) enumerator_list -> enumerator_list COMMA enumerator .

    R_BRACE         reduce using rule 125 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 125 (enumerator_list -> enumerator_list COMMA enumerator .)


state 308

    (169) initializer -> L_BRACE initializer_list R_BRACE .

    R_BRACE         reduce using rule 169 (initializer -> L_BRACE initializer_list R_BRACE .)
    COMMA           reduce using rule 169 (initializer -> L_BRACE initializer_list R_BRACE .)
    SEMICOLON       reduce using rule 169 (initializer -> L_BRACE initializer_list R_BRACE .)


state 309

    (170) initializer -> L_BRACE initializer_list COMMA . R_BRACE
    (172) initializer_list -> initializer_list COMMA . initializer
    (168) initializer -> . assignment_expression
    (169) initializer -> . L_BRACE initializer_list R_BRACE
    (170) initializer -> . L_BRACE initializer_list COMMA R_BRACE
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    R_BRACE         shift and go to state 331
    L_BRACE         shift and go to state 150
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    initializer                    shift and go to state 332
    shift_expression               shift and go to state 115
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 151
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94

state 310

    (196) iteration_statement -> DO statement WHILE L_BRACKET . expression R_BRACKET SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    expression                     shift and go to state 333
    logical_and_expression         shift and go to state 94

state 311

    (195) iteration_statement -> WHILE L_BRACKET expression R_BRACKET . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 334
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 312

    (58) conditional_expression -> logical_or_expression INTER expression COLON . conditional_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET

    L_BRACKET       shift and go to state 128
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113

    equality_expression            shift and go to state 117
    unary_expression               shift and go to state 131
    unary_operator                 shift and go to state 105
    conditional_expression         shift and go to state 335
    additive_expression            shift and go to state 95
    and_expression                 shift and go to state 97
    shift_expression               shift and go to state 115
    inclusive_or_expression        shift and go to state 106
    primary_expression             shift and go to state 72
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    logical_and_expression         shift and go to state 94
    logical_or_expression          shift and go to state 77
    multiplicative_expression      shift and go to state 99
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109

state 313

    (197) iteration_statement -> FOR L_BRACKET expression_statement expression_statement . R_BRACKET statement
    (198) iteration_statement -> FOR L_BRACKET expression_statement expression_statement . expression R_BRACKET statement
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    R_BRACKET       shift and go to state 336
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    primary_expression             shift and go to state 72
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    multiplicative_expression      shift and go to state 99
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    relational_expression          shift and go to state 119
    exclusive_or_expression        shift and go to state 109
    unary_expression               shift and go to state 92
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    cast_expression                shift and go to state 90
    expression                     shift and go to state 337
    logical_and_expression         shift and go to state 94

state 314

    (8) postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .

    L_BRACE         reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    L_BRACKET       reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    POINT           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    PTR_OP          reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    INC_OP          reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    DEC_OP          reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    EQUALS          reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    MUL_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    DIV_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    MOD_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    ADD_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    SUB_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    LEFT_ASSIGN     reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    AND_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    XOR_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    OR_ASSIGN       reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    TIMES           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    DIVIDE          reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    MOD             reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    PLUS            reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    MINUS           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    LEFT_OP         reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    RIGHT_OP        reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    INF             reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    SUP             reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    LE_OP           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    GE_OP           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    EQ_OP           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    NE_OP           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    AND             reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    EXOR            reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    OR              reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    AND_OP          reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    INTER           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    OR_OP           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    SEMICOLON       reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    COMMA           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    R_BRACKET       reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    R_HOOK          reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    COLON           reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)
    R_BRACE         reduce using rule 8 (postfix_expression -> postfix_expression L_BRACKET argument_expression_list R_BRACKET .)


state 315

    (14) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    IDENTIFIER      shift and go to state 127
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    unary_expression               shift and go to state 92
    primary_expression             shift and go to state 72
    logical_and_expression         shift and go to state 94
    assignment_expression          shift and go to state 338
    conditional_expression         shift and go to state 73
    unary_operator                 shift and go to state 105
    and_expression                 shift and go to state 97
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    additive_expression            shift and go to state 95
    equality_expression            shift and go to state 117
    postfix_expression             shift and go to state 83
    relational_expression          shift and go to state 119
    shift_expression               shift and go to state 115
    logical_or_expression          shift and go to state 77
    exclusive_or_expression        shift and go to state 109
    cast_expression                shift and go to state 90

state 316

    (6) postfix_expression -> postfix_expression L_BRACE expression R_BRACE .

    L_BRACE         reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    L_BRACKET       reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    POINT           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    PTR_OP          reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    INC_OP          reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    DEC_OP          reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    EQUALS          reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    MUL_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    DIV_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    MOD_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    ADD_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    SUB_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    LEFT_ASSIGN     reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    RIGHT_ASSIGN    reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    AND_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    XOR_ASSIGN      reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    OR_ASSIGN       reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    TIMES           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    DIVIDE          reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    MOD             reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    PLUS            reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    MINUS           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    LEFT_OP         reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    RIGHT_OP        reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    INF             reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    SUP             reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    LE_OP           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    GE_OP           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    EQ_OP           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    NE_OP           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    AND             reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    EXOR            reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    OR              reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    AND_OP          reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    INTER           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    OR_OP           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    SEMICOLON       reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    COMMA           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    R_BRACKET       reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    R_HOOK          reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    COLON           reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)
    R_BRACE         reduce using rule 6 (postfix_expression -> postfix_expression L_BRACE expression R_BRACE .)


state 317

    (194) selection_statement -> SWITCH L_BRACKET expression R_BRACKET . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 339
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 318

    (28) cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .

    TIMES           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    DIVIDE          reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    MOD             reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    PLUS            reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    MINUS           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    LEFT_OP         reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    RIGHT_OP        reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    INF             reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    SUP             reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    LE_OP           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    GE_OP           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    EQ_OP           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    NE_OP           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    AND             reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    EXOR            reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    OR              reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    AND_OP          reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    INTER           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    OR_OP           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    COLON           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    COMMA           reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    R_BRACE         reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    SEMICOLON       reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    R_BRACKET       reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    R_HOOK          reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    EQUALS          reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    MUL_ASSIGN      reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    DIV_ASSIGN      reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    MOD_ASSIGN      reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    ADD_ASSIGN      reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    SUB_ASSIGN      reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    LEFT_ASSIGN     reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    RIGHT_ASSIGN    reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    AND_ASSIGN      reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    XOR_ASSIGN      reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)
    OR_ASSIGN       reduce using rule 28 (cast_expression -> L_BRACKET type_name R_BRACKET cast_expression .)


state 319

    (192) selection_statement -> IF L_BRACKET expression R_BRACKET . statement
    (193) selection_statement -> IF L_BRACKET expression R_BRACKET . statement ELSE statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 340
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 320

    (180) labeled_statement -> CASE constant_expression COLON statement .

    R_BRACE         reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    L_BRACE         reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMICOLON       reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    INC_OP          reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    DEC_OP          reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    AND             reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    TIMES           reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    PLUS            reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    MINUS           reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    TILD            reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    NOT             reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    CONSTANT        reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    STRING_LITERAL  reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    L_BRACKET       reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 180 (labeled_statement -> CASE constant_expression COLON statement .)


state 321

    (20) unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .

    TIMES           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    DIVIDE          reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    MOD             reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    PLUS            reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    MINUS           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    LEFT_OP         reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    RIGHT_OP        reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    INF             reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    SUP             reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    LE_OP           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    GE_OP           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    EQ_OP           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    NE_OP           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    AND             reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    EXOR            reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    OR              reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    AND_OP          reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    INTER           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    OR_OP           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    R_HOOK          reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    SEMICOLON       reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    COMMA           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    EQUALS          reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    MUL_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    DIV_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    MOD_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    ADD_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    SUB_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    LEFT_ASSIGN     reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    RIGHT_ASSIGN    reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    AND_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    XOR_ASSIGN      reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    OR_ASSIGN       reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    R_BRACKET       reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    COLON           reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)
    R_BRACE         reduce using rule 20 (unary_expression -> SIZEOF L_BRACKET type_name R_BRACKET .)


state 322

    (159) direct_abstract_declarator -> L_BRACKET abstract_declarator R_BRACKET .

    L_HOOK          reduce using rule 159 (direct_abstract_declarator -> L_BRACKET abstract_declarator R_BRACKET .)
    L_BRACKET       reduce using rule 159 (direct_abstract_declarator -> L_BRACKET abstract_declarator R_BRACKET .)
    R_BRACKET       reduce using rule 159 (direct_abstract_declarator -> L_BRACKET abstract_declarator R_BRACKET .)
    COMMA           reduce using rule 159 (direct_abstract_declarator -> L_BRACKET abstract_declarator R_BRACKET .)


state 323

    (165) direct_abstract_declarator -> L_BRACKET parameter_type_list R_BRACKET .

    L_HOOK          reduce using rule 165 (direct_abstract_declarator -> L_BRACKET parameter_type_list R_BRACKET .)
    L_BRACKET       reduce using rule 165 (direct_abstract_declarator -> L_BRACKET parameter_type_list R_BRACKET .)
    R_BRACKET       reduce using rule 165 (direct_abstract_declarator -> L_BRACKET parameter_type_list R_BRACKET .)
    COMMA           reduce using rule 165 (direct_abstract_declarator -> L_BRACKET parameter_type_list R_BRACKET .)


state 324

    (161) direct_abstract_declarator -> L_HOOK constant_expression R_HOOK .

    L_HOOK          reduce using rule 161 (direct_abstract_declarator -> L_HOOK constant_expression R_HOOK .)
    L_BRACKET       reduce using rule 161 (direct_abstract_declarator -> L_HOOK constant_expression R_HOOK .)
    R_BRACKET       reduce using rule 161 (direct_abstract_declarator -> L_HOOK constant_expression R_HOOK .)
    COMMA           reduce using rule 161 (direct_abstract_declarator -> L_HOOK constant_expression R_HOOK .)


state 325

    (162) direct_abstract_declarator -> direct_abstract_declarator L_HOOK R_HOOK .

    L_HOOK          reduce using rule 162 (direct_abstract_declarator -> direct_abstract_declarator L_HOOK R_HOOK .)
    L_BRACKET       reduce using rule 162 (direct_abstract_declarator -> direct_abstract_declarator L_HOOK R_HOOK .)
    R_BRACKET       reduce using rule 162 (direct_abstract_declarator -> direct_abstract_declarator L_HOOK R_HOOK .)
    COMMA           reduce using rule 162 (direct_abstract_declarator -> direct_abstract_declarator L_HOOK R_HOOK .)


state 326

    (163) direct_abstract_declarator -> direct_abstract_declarator L_HOOK constant_expression . R_HOOK

    R_HOOK          shift and go to state 341


state 327

    (167) direct_abstract_declarator -> direct_abstract_declarator L_BRACKET parameter_type_list . R_BRACKET

    R_BRACKET       shift and go to state 342


state 328

    (166) direct_abstract_declarator -> direct_abstract_declarator L_BRACKET R_BRACKET .

    L_HOOK          reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator L_BRACKET R_BRACKET .)
    L_BRACKET       reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator L_BRACKET R_BRACKET .)
    R_BRACKET       reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator L_BRACKET R_BRACKET .)
    COMMA           reduce using rule 166 (direct_abstract_declarator -> direct_abstract_declarator L_BRACKET R_BRACKET .)


state 329

    (120) struct_declarator -> declarator COLON constant_expression .

    SEMICOLON       reduce using rule 120 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 120 (struct_declarator -> declarator COLON constant_expression .)


state 330

    (117) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMICOLON       reduce using rule 117 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 117 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 331

    (170) initializer -> L_BRACE initializer_list COMMA R_BRACE .

    R_BRACE         reduce using rule 170 (initializer -> L_BRACE initializer_list COMMA R_BRACE .)
    COMMA           reduce using rule 170 (initializer -> L_BRACE initializer_list COMMA R_BRACE .)
    SEMICOLON       reduce using rule 170 (initializer -> L_BRACE initializer_list COMMA R_BRACE .)


state 332

    (172) initializer_list -> initializer_list COMMA initializer .

    R_BRACE         reduce using rule 172 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 172 (initializer_list -> initializer_list COMMA initializer .)


state 333

    (196) iteration_statement -> DO statement WHILE L_BRACKET expression . R_BRACKET SEMICOLON
    (73) expression -> expression . COMMA assignment_expression

    R_BRACKET       shift and go to state 343
    COMMA           shift and go to state 168


state 334

    (195) iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .

    R_BRACE         reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    IDENTIFIER      reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    CASE            reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    DEFAULT         reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    L_BRACE         reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    SEMICOLON       reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    IF              reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    SWITCH          reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    WHILE           reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    DO              reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    FOR             reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    GOTO            reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    CONTINUE        reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    BREAK           reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    RETURN          reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    INC_OP          reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    DEC_OP          reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    SIZEOF          reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    AND             reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    TIMES           reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    PLUS            reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    MINUS           reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    TILD            reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    NOT             reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    CONSTANT        reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    STRING_LITERAL  reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    L_BRACKET       reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)
    ELSE            reduce using rule 195 (iteration_statement -> WHILE L_BRACKET expression R_BRACKET statement .)


state 335

    (58) conditional_expression -> logical_or_expression INTER expression COLON conditional_expression .

    R_BRACKET       reduce using rule 58 (conditional_expression -> logical_or_expression INTER expression COLON conditional_expression .)
    COMMA           reduce using rule 58 (conditional_expression -> logical_or_expression INTER expression COLON conditional_expression .)
    SEMICOLON       reduce using rule 58 (conditional_expression -> logical_or_expression INTER expression COLON conditional_expression .)
    R_BRACE         reduce using rule 58 (conditional_expression -> logical_or_expression INTER expression COLON conditional_expression .)
    COLON           reduce using rule 58 (conditional_expression -> logical_or_expression INTER expression COLON conditional_expression .)
    R_HOOK          reduce using rule 58 (conditional_expression -> logical_or_expression INTER expression COLON conditional_expression .)


state 336

    (197) iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 344
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 337

    (198) iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression . R_BRACKET statement
    (73) expression -> expression . COMMA assignment_expression

    R_BRACKET       shift and go to state 345
    COMMA           shift and go to state 168


state 338

    (14) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    R_BRACKET       reduce using rule 14 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 14 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 339

    (194) selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .

    R_BRACE         reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    IDENTIFIER      reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    CASE            reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    DEFAULT         reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    L_BRACE         reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    SEMICOLON       reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    IF              reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    SWITCH          reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    WHILE           reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    DO              reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    FOR             reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    GOTO            reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    CONTINUE        reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    BREAK           reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    RETURN          reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    INC_OP          reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    DEC_OP          reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    SIZEOF          reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    AND             reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    TIMES           reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    PLUS            reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    MINUS           reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    TILD            reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    NOT             reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    CONSTANT        reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    STRING_LITERAL  reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    L_BRACKET       reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)
    ELSE            reduce using rule 194 (selection_statement -> SWITCH L_BRACKET expression R_BRACKET statement .)


state 340

    (192) selection_statement -> IF L_BRACKET expression R_BRACKET statement .
    (193) selection_statement -> IF L_BRACKET expression R_BRACKET statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    R_BRACE         reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    IDENTIFIER      reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    CASE            reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    DEFAULT         reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    L_BRACE         reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    SEMICOLON       reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    IF              reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    SWITCH          reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    WHILE           reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    DO              reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    FOR             reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    GOTO            reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    CONTINUE        reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    BREAK           reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    RETURN          reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    INC_OP          reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    DEC_OP          reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    SIZEOF          reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    AND             reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    TIMES           reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    PLUS            reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    MINUS           reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    TILD            reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    NOT             reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    CONSTANT        reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    STRING_LITERAL  reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    L_BRACKET       reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .)
    ELSE            shift and go to state 346

  ! ELSE            [ reduce using rule 192 (selection_statement -> IF L_BRACKET expression R_BRACKET statement .) ]


state 341

    (163) direct_abstract_declarator -> direct_abstract_declarator L_HOOK constant_expression R_HOOK .

    L_HOOK          reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator L_HOOK constant_expression R_HOOK .)
    L_BRACKET       reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator L_HOOK constant_expression R_HOOK .)
    R_BRACKET       reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator L_HOOK constant_expression R_HOOK .)
    COMMA           reduce using rule 163 (direct_abstract_declarator -> direct_abstract_declarator L_HOOK constant_expression R_HOOK .)


state 342

    (167) direct_abstract_declarator -> direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET .

    L_HOOK          reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET .)
    L_BRACKET       reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET .)
    R_BRACKET       reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET .)
    COMMA           reduce using rule 167 (direct_abstract_declarator -> direct_abstract_declarator L_BRACKET parameter_type_list R_BRACKET .)


state 343

    (196) iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 347


state 344

    (197) iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .

    R_BRACE         reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    IDENTIFIER      reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    CASE            reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    DEFAULT         reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    L_BRACE         reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    SEMICOLON       reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    IF              reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    SWITCH          reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    WHILE           reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    DO              reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    FOR             reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    GOTO            reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    CONTINUE        reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    BREAK           reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    RETURN          reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    INC_OP          reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    DEC_OP          reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    SIZEOF          reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    AND             reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    TIMES           reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    PLUS            reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    MINUS           reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    TILD            reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    NOT             reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    CONSTANT        reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    STRING_LITERAL  reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    L_BRACKET       reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)
    ELSE            reduce using rule 197 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement R_BRACKET statement .)


state 345

    (198) iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 348
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 346

    (193) selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE . statement
    (173) statement -> . labeled_statement
    (174) statement -> . compound_statement
    (175) statement -> . expression_statement
    (176) statement -> . selection_statement
    (177) statement -> . iteration_statement
    (178) statement -> . jump_statement
    (179) labeled_statement -> . IDENTIFIER COLON statement
    (180) labeled_statement -> . CASE constant_expression COLON statement
    (181) labeled_statement -> . DEFAULT COLON statement
    (182) compound_statement -> . L_BRACE R_BRACE
    (183) compound_statement -> . L_BRACE statement_list R_BRACE
    (184) compound_statement -> . L_BRACE declaration_list R_BRACE
    (185) compound_statement -> . L_BRACE declaration_list statement_list R_BRACE
    (190) expression_statement -> . SEMICOLON
    (191) expression_statement -> . expression SEMICOLON
    (192) selection_statement -> . IF L_BRACKET expression R_BRACKET statement
    (193) selection_statement -> . IF L_BRACKET expression R_BRACKET statement ELSE statement
    (194) selection_statement -> . SWITCH L_BRACKET expression R_BRACKET statement
    (195) iteration_statement -> . WHILE L_BRACKET expression R_BRACKET statement
    (196) iteration_statement -> . DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON
    (197) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement R_BRACKET statement
    (198) iteration_statement -> . FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement
    (199) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (200) jump_statement -> . CONTINUE SEMICOLON
    (201) jump_statement -> . BREAK SEMICOLON
    (202) jump_statement -> . RETURN SEMICOLON
    (203) jump_statement -> . RETURN expression SEMICOLON
    (72) expression -> . assignment_expression
    (73) expression -> . expression COMMA assignment_expression
    (59) assignment_expression -> . conditional_expression
    (60) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (57) conditional_expression -> . logical_or_expression
    (58) conditional_expression -> . logical_or_expression INTER expression COLON conditional_expression
    (15) unary_expression -> . postfix_expression
    (16) unary_expression -> . INC_OP unary_expression
    (17) unary_expression -> . DEC_OP unary_expression
    (18) unary_expression -> . unary_operator cast_expression
    (19) unary_expression -> . SIZEOF unary_expression
    (20) unary_expression -> . SIZEOF L_BRACKET type_name R_BRACKET
    (55) logical_or_expression -> . logical_and_expression
    (56) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (5) postfix_expression -> . primary_expression
    (6) postfix_expression -> . postfix_expression L_BRACE expression R_BRACE
    (7) postfix_expression -> . postfix_expression L_BRACKET R_BRACKET
    (8) postfix_expression -> . postfix_expression L_BRACKET argument_expression_list R_BRACKET
    (9) postfix_expression -> . postfix_expression POINT IDENTIFIER
    (10) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (11) postfix_expression -> . postfix_expression INC_OP
    (12) postfix_expression -> . postfix_expression DEC_OP
    (21) unary_operator -> . AND
    (22) unary_operator -> . TIMES
    (23) unary_operator -> . PLUS
    (24) unary_operator -> . MINUS
    (25) unary_operator -> . TILD
    (26) unary_operator -> . NOT
    (53) logical_and_expression -> . inclusive_or_expression
    (54) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (1) primary_expression -> . IDENTIFIER
    (2) primary_expression -> . CONSTANT
    (3) primary_expression -> . STRING_LITERAL
    (4) primary_expression -> . L_BRACKET expression R_BRACKET
    (51) inclusive_or_expression -> . exclusive_or_expression
    (52) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (49) exclusive_or_expression -> . and_expression
    (50) exclusive_or_expression -> . exclusive_or_expression EXOR and_expression
    (47) and_expression -> . equality_expression
    (48) and_expression -> . and_expression AND equality_expression
    (44) equality_expression -> . relational_expression
    (45) equality_expression -> . equality_expression EQ_OP relational_expression
    (46) equality_expression -> . equality_expression NE_OP relational_expression
    (39) relational_expression -> . shift_expression
    (40) relational_expression -> . relational_expression INF shift_expression
    (41) relational_expression -> . relational_expression SUP shift_expression
    (42) relational_expression -> . relational_expression LE_OP shift_expression
    (43) relational_expression -> . relational_expression GE_OP shift_expression
    (36) shift_expression -> . additive_expression
    (37) shift_expression -> . shift_expression LEFT_OP additive_expression
    (38) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (33) additive_expression -> . multiplicative_expression
    (34) additive_expression -> . additive_expression PLUS multiplicative_expression
    (35) additive_expression -> . additive_expression MINUS multiplicative_expression
    (29) multiplicative_expression -> . cast_expression
    (30) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (31) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (32) multiplicative_expression -> . multiplicative_expression MOD cast_expression
    (27) cast_expression -> . unary_expression
    (28) cast_expression -> . L_BRACKET type_name R_BRACKET cast_expression

    IDENTIFIER      shift and go to state 100
    CASE            shift and go to state 120
    DEFAULT         shift and go to state 124
    L_BRACE         shift and go to state 49
    SEMICOLON       shift and go to state 89
    IF              shift and go to state 114
    SWITCH          shift and go to state 86
    WHILE           shift and go to state 76
    DO              shift and go to state 74
    FOR             shift and go to state 78
    GOTO            shift and go to state 111
    CONTINUE        shift and go to state 112
    BREAK           shift and go to state 116
    RETURN          shift and go to state 91
    INC_OP          shift and go to state 107
    DEC_OP          shift and go to state 75
    SIZEOF          shift and go to state 122
    AND             shift and go to state 82
    TIMES           shift and go to state 80
    PLUS            shift and go to state 88
    MINUS           shift and go to state 123
    TILD            shift and go to state 98
    NOT             shift and go to state 121
    CONSTANT        shift and go to state 103
    STRING_LITERAL  shift and go to state 113
    L_BRACKET       shift and go to state 108

    expression_statement           shift and go to state 96
    selection_statement            shift and go to state 85
    and_expression                 shift and go to state 97
    conditional_expression         shift and go to state 73
    additive_expression            shift and go to state 95
    shift_expression               shift and go to state 115
    primary_expression             shift and go to state 72
    equality_expression            shift and go to state 117
    logical_or_expression          shift and go to state 77
    cast_expression                shift and go to state 90
    unary_expression               shift and go to state 92
    iteration_statement            shift and go to state 102
    assignment_expression          shift and go to state 104
    unary_operator                 shift and go to state 105
    compound_statement             shift and go to state 79
    labeled_statement              shift and go to state 81
    multiplicative_expression      shift and go to state 99
    inclusive_or_expression        shift and go to state 106
    postfix_expression             shift and go to state 83
    statement                      shift and go to state 349
    relational_expression          shift and go to state 119
    expression                     shift and go to state 84
    logical_and_expression         shift and go to state 94
    exclusive_or_expression        shift and go to state 109
    jump_statement                 shift and go to state 110

state 347

    (196) iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .

    R_BRACE         reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    CASE            reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    DEFAULT         reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    L_BRACE         reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    IF              reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    SWITCH          reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    WHILE           reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    DO              reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    FOR             reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    GOTO            reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    BREAK           reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    RETURN          reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    INC_OP          reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    DEC_OP          reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    SIZEOF          reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    AND             reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    TIMES           reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    PLUS            reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    MINUS           reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    TILD            reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    NOT             reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    CONSTANT        reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    L_BRACKET       reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)
    ELSE            reduce using rule 196 (iteration_statement -> DO statement WHILE L_BRACKET expression R_BRACKET SEMICOLON .)


state 348

    (198) iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .

    R_BRACE         reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    IDENTIFIER      reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    CASE            reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    DEFAULT         reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    L_BRACE         reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    SEMICOLON       reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    IF              reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    SWITCH          reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    WHILE           reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    DO              reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    FOR             reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    GOTO            reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    CONTINUE        reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    BREAK           reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    RETURN          reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    INC_OP          reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    DEC_OP          reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    SIZEOF          reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    AND             reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    TIMES           reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    PLUS            reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    MINUS           reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    TILD            reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    NOT             reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    CONSTANT        reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    STRING_LITERAL  reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    L_BRACKET       reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)
    ELSE            reduce using rule 198 (iteration_statement -> FOR L_BRACKET expression_statement expression_statement expression R_BRACKET statement .)


state 349

    (193) selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .

    R_BRACE         reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    IDENTIFIER      reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    CASE            reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    DEFAULT         reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    L_BRACE         reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    SEMICOLON       reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    IF              reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    SWITCH          reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    WHILE           reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    DO              reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    FOR             reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    GOTO            reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    CONTINUE        reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    BREAK           reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    RETURN          reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    INC_OP          reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    DEC_OP          reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    SIZEOF          reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    AND             reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    TIMES           reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    PLUS            reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    MINUS           reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    TILD            reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    NOT             reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    CONSTANT        reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    STRING_LITERAL  reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    L_BRACKET       reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)
    ELSE            reduce using rule 193 (selection_statement -> IF L_BRACKET expression R_BRACKET statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 340 resolved as shift
